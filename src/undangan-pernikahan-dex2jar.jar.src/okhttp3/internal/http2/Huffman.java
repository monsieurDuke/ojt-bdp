/*    */ package okhttp3.internal.http2;
/*    */ 
/*    */ import java.nio.ByteBuffer;
/*    */ 
/*    */ @kotlin.Metadata(bv={1, 0, 3}, d1={"\000F\n\002\030\002\n\002\020\000\n\002\b\002\n\002\020\025\n\000\n\002\020\022\n\000\n\002\030\002\n\000\n\002\020\002\n\000\n\002\020\b\n\002\b\004\n\002\030\002\n\000\n\002\020\t\n\000\n\002\030\002\n\000\n\002\030\002\n\002\b\004\bÆ\002\030\0002\0020\001:\001\032B\007\b\002¢\006\002\020\002J \020\t\032\0020\n2\006\020\013\032\0020\f2\006\020\r\032\0020\f2\006\020\016\032\0020\fH\002J\036\020\017\032\0020\n2\006\020\020\032\0020\0212\006\020\022\032\0020\0232\006\020\024\032\0020\025J\026\020\026\032\0020\n2\006\020\020\032\0020\0272\006\020\024\032\0020\025J\016\020\030\032\0020\f2\006\020\031\032\0020\027R\016\020\003\032\0020\004X\004¢\006\002\n\000R\016\020\005\032\0020\006X\004¢\006\002\n\000R\016\020\007\032\0020\bX\004¢\006\002\n\000¨\006\033"}, d2={"Lokhttp3/internal/http2/Huffman;", "", "()V", "CODES", "", "CODE_BIT_COUNTS", "", "root", "Lokhttp3/internal/http2/Huffman$Node;", "addCode", "", "symbol", "", "code", "codeBitCount", "decode", "source", "Lokio/BufferedSource;", "byteCount", "", "sink", "Lokio/BufferedSink;", "encode", "Lokio/ByteString;", "encodedLength", "bytes", "Node", "okhttp"}, k=1, mv={1, 4, 0})
/*    */ public final class Huffman { static { Huffman localHuffman = new Huffman();
/*    */     INSTANCE = localHuffman;
/*    */     CODES = $d2j$hex$1491a264$decode_I("f81f0000d8ff7f00e2ffff0fe3ffff0fe4ffff0fe5ffff0fe6ffff0fe7ffff0fe8ffff0feaffff00fcffff3fe9ffff0feaffff0ffdffff3febffff0fecffff0fedffff0feeffff0fefffff0ff0ffff0ff1ffff0ff2ffff0ffeffff3ff3ffff0ff4ffff0ff5ffff0ff6ffff0ff7ffff0ff8ffff0ff9ffff0ffaffff0ffbffff0f14000000f8030000f9030000fa0f0000f91f000015000000f8000000fa070000fa030000fb030000f9000000fb070000fa000000160000001700000018000000000000000100000002000000190000001a0000001b0000001c0000001d0000001e0000001f0000005c000000fb000000fc7f000020000000fb0f0000fc030000fa1f0000210000005d0000005e0000005f000000600000006100000062000000630000006400000065000000660000006700000068000000690000006a0000006b0000006c0000006d0000006e0000006f000000700000007100000072000000fc00000073000000fd000000fb1f0000f0ff0700fc1f0000fc3f000022000000fd7f0000030000002300000004000000240000000500000025000000260000002700000006000000740000007500000028000000290000002a000000070000002b000000760000002c00000008000000090000002d0000007700000078000000790000007a0000007b000000fe7f0000fc070000fd3f0000fd1f0000fcffff0fe6ff0f00d2ff3f00e7ff0f00e8ff0f00d3ff3f00d4ff3f00d5ff3f00d9ff7f00d6ff3f00daff7f00dbff7f00dcff7f00ddff7f00deff7f00ebffff00dfff7f00ecffff00edffff00d7ff3f00e0ff7f00eeffff00e1ff7f00e2ff7f00e3ff7f00e4ff7f00dcff1f00d8ff3f00e5ff7f00d9ff3f00e6ff7f00e7ff7f00efffff00daff3f00ddff1f00e9ff0f00dbff3f00dcff3f00e8ff7f00e9ff7f00deff1f00eaff7f00ddff3f00deff3f00f0ffff00dfff1f00dfff3f00ebff7f00ecff7f00e0ff1f00e1ff1f00e0ff3f00e2ff1f00edff7f00e1ff3f00eeff7f00efff7f00eaff0f00e2ff3f00e3ff3f00e4ff3f00f0ff7f00e5ff3f00e6ff3f00f1ff7f00e0ffff03e1ffff03ebff0f00f1ff0700e7ff3f00f2ff7f00e8ff3f00ecffff01e2ffff03e3ffff03e4ffff03deffff07dfffff07e5ffff03f1ffff00edffff01f2ff0700e3ff1f00e6ffff03e0ffff07e1ffff07e7ffff03e2ffff07f2ffff00e4ff1f00e5ff1f00e8ffff03e9ffff03fdffff0fe3ffff07e4ffff07e5ffff07ecff0f00f3ffff00edff0f00e6ff1f00e9ff3f00e7ff1f00e8ff1f00f3ff7f00eaff3f00ebff3f00eeffff01efffff01f4ffff00f5ffff00eaffff03f4ff7f00ebffff03e6ffff07ecffff03edffff03e7ffff07e8ffff07e9ffff07eaffff07ebffff07feffff0fecffff07edffff07eeffff07efffff07f0ffff07eeffff03");
/*    */     byte[] arrayOfByte = new byte['Ā'];
/*    */     byte[] tmp27_26 = arrayOfByte;
/*    */     tmp27_26[0] = 13;
/*    */     byte[] tmp32_27 = tmp27_26;
/*    */     tmp32_27[1] = 23;
/*    */     byte[] tmp37_32 = tmp32_27;
/*    */     tmp37_32[2] = 28;
/*    */     byte[] tmp42_37 = tmp37_32;
/*    */     tmp42_37[3] = 28;
/*    */     byte[] tmp47_42 = tmp42_37;
/*    */     tmp47_42[4] = 28;
/*    */     byte[] tmp52_47 = tmp47_42;
/*    */     tmp52_47[5] = 28;
/*    */     byte[] tmp57_52 = tmp52_47;
/*    */     tmp57_52[6] = 28;
/*    */     byte[] tmp63_57 = tmp57_52;
/*    */     tmp63_57[7] = 28;
/*    */     byte[] tmp69_63 = tmp63_57;
/*    */     tmp69_63[8] = 28;
/*    */     byte[] tmp75_69 = tmp69_63;
/*    */     tmp75_69[9] = 24;
/*    */     byte[] tmp81_75 = tmp75_69;
/*    */     tmp81_75[10] = 30;
/*    */     byte[] tmp87_81 = tmp81_75;
/*    */     tmp87_81[11] = 28;
/*    */     byte[] tmp93_87 = tmp87_81;
/*    */     tmp93_87[12] = 28;
/*    */     byte[] tmp99_93 = tmp93_87;
/*    */     tmp99_93[13] = 30;
/*    */     byte[] tmp105_99 = tmp99_93;
/*    */     tmp105_99[14] = 28;
/*    */     byte[] tmp111_105 = tmp105_99;
/*    */     tmp111_105[15] = 28;
/*    */     byte[] tmp117_111 = tmp111_105;
/*    */     tmp117_111[16] = 28;
/*    */     byte[] tmp123_117 = tmp117_111;
/*    */     tmp123_117[17] = 28;
/*    */     byte[] tmp129_123 = tmp123_117;
/*    */     tmp129_123[18] = 28;
/*    */     byte[] tmp135_129 = tmp129_123;
/*    */     tmp135_129[19] = 28;
/*    */     byte[] tmp141_135 = tmp135_129;
/*    */     tmp141_135[20] = 28;
/*    */     byte[] tmp147_141 = tmp141_135;
/*    */     tmp147_141[21] = 28;
/*    */     byte[] tmp153_147 = tmp147_141;
/*    */     tmp153_147[22] = 30;
/*    */     byte[] tmp159_153 = tmp153_147;
/*    */     tmp159_153[23] = 28;
/*    */     byte[] tmp165_159 = tmp159_153;
/*    */     tmp165_159[24] = 28;
/*    */     byte[] tmp171_165 = tmp165_159;
/*    */     tmp171_165[25] = 28;
/*    */     byte[] tmp177_171 = tmp171_165;
/*    */     tmp177_171[26] = 28;
/*    */     byte[] tmp183_177 = tmp177_171;
/*    */     tmp183_177[27] = 28;
/*    */     byte[] tmp189_183 = tmp183_177;
/*    */     tmp189_183[28] = 28;
/*    */     byte[] tmp195_189 = tmp189_183;
/*    */     tmp195_189[29] = 28;
/*    */     byte[] tmp201_195 = tmp195_189;
/*    */     tmp201_195[30] = 28;
/*    */     byte[] tmp207_201 = tmp201_195;
/*    */     tmp207_201[31] = 28;
/*    */     byte[] tmp213_207 = tmp207_201;
/*    */     tmp213_207[32] = 6;
/*    */     byte[] tmp219_213 = tmp213_207;
/*    */     tmp219_213[33] = 10;
/*    */     byte[] tmp225_219 = tmp219_213;
/*    */     tmp225_219[34] = 10;
/*    */     byte[] tmp231_225 = tmp225_219;
/*    */     tmp231_225[35] = 12;
/*    */     byte[] tmp237_231 = tmp231_225;
/*    */     tmp237_231[36] = 13;
/*    */     byte[] tmp243_237 = tmp237_231;
/*    */     tmp243_237[37] = 6;
/*    */     byte[] tmp249_243 = tmp243_237;
/*    */     tmp249_243[38] = 8;
/*    */     byte[] tmp255_249 = tmp249_243;
/*    */     tmp255_249[39] = 11;
/*    */     byte[] tmp261_255 = tmp255_249;
/*    */     tmp261_255[40] = 10;
/*    */     byte[] tmp267_261 = tmp261_255;
/*    */     tmp267_261[41] = 10;
/*    */     byte[] tmp273_267 = tmp267_261;
/*    */     tmp273_267[42] = 8;
/*    */     byte[] tmp279_273 = tmp273_267;
/*    */     tmp279_273[43] = 11;
/*    */     byte[] tmp285_279 = tmp279_273;
/*    */     tmp285_279[44] = 8;
/*    */     byte[] tmp291_285 = tmp285_279;
/*    */     tmp291_285[45] = 6;
/*    */     byte[] tmp297_291 = tmp291_285;
/*    */     tmp297_291[46] = 6;
/*    */     byte[] tmp303_297 = tmp297_291;
/*    */     tmp303_297[47] = 6;
/*    */     byte[] tmp309_303 = tmp303_297;
/*    */     tmp309_303[48] = 5;
/*    */     byte[] tmp315_309 = tmp309_303;
/*    */     tmp315_309[49] = 5;
/*    */     byte[] tmp321_315 = tmp315_309;
/*    */     tmp321_315[50] = 5;
/*    */     byte[] tmp327_321 = tmp321_315;
/*    */     tmp327_321[51] = 6;
/*    */     byte[] tmp333_327 = tmp327_321;
/*    */     tmp333_327[52] = 6;
/*    */     byte[] tmp339_333 = tmp333_327;
/*    */     tmp339_333[53] = 6;
/*    */     byte[] tmp345_339 = tmp339_333;
/*    */     tmp345_339[54] = 6;
/*    */     byte[] tmp351_345 = tmp345_339;
/*    */     tmp351_345[55] = 6;
/*    */     byte[] tmp357_351 = tmp351_345;
/*    */     tmp357_351[56] = 6;
/*    */     byte[] tmp363_357 = tmp357_351;
/*    */     tmp363_357[57] = 6;
/*    */     byte[] tmp369_363 = tmp363_357;
/*    */     tmp369_363[58] = 7;
/*    */     byte[] tmp375_369 = tmp369_363;
/*    */     tmp375_369[59] = 8;
/*    */     byte[] tmp381_375 = tmp375_369;
/*    */     tmp381_375[60] = 15;
/*    */     byte[] tmp387_381 = tmp381_375;
/*    */     tmp387_381[61] = 6;
/*    */     byte[] tmp393_387 = tmp387_381;
/*    */     tmp393_387[62] = 12;
/*    */     byte[] tmp399_393 = tmp393_387;
/*    */     tmp399_393[63] = 10;
/*    */     byte[] tmp405_399 = tmp399_393;
/*    */     tmp405_399[64] = 13;
/*    */     byte[] tmp411_405 = tmp405_399;
/*    */     tmp411_405[65] = 6;
/*    */     byte[] tmp417_411 = tmp411_405;
/*    */     tmp417_411[66] = 7;
/*    */     byte[] tmp423_417 = tmp417_411;
/*    */     tmp423_417[67] = 7;
/*    */     byte[] tmp429_423 = tmp423_417;
/*    */     tmp429_423[68] = 7;
/*    */     byte[] tmp435_429 = tmp429_423;
/*    */     tmp435_429[69] = 7;
/*    */     byte[] tmp441_435 = tmp435_429;
/*    */     tmp441_435[70] = 7;
/*    */     byte[] tmp447_441 = tmp441_435;
/*    */     tmp447_441[71] = 7;
/*    */     byte[] tmp453_447 = tmp447_441;
/*    */     tmp453_447[72] = 7;
/*    */     byte[] tmp459_453 = tmp453_447;
/*    */     tmp459_453[73] = 7;
/*    */     byte[] tmp465_459 = tmp459_453;
/*    */     tmp465_459[74] = 7;
/*    */     byte[] tmp471_465 = tmp465_459;
/*    */     tmp471_465[75] = 7;
/*    */     byte[] tmp477_471 = tmp471_465;
/*    */     tmp477_471[76] = 7;
/*    */     byte[] tmp483_477 = tmp477_471;
/*    */     tmp483_477[77] = 7;
/*    */     byte[] tmp489_483 = tmp483_477;
/*    */     tmp489_483[78] = 7;
/*    */     byte[] tmp495_489 = tmp489_483;
/*    */     tmp495_489[79] = 7;
/*    */     byte[] tmp501_495 = tmp495_489;
/*    */     tmp501_495[80] = 7;
/*    */     byte[] tmp507_501 = tmp501_495;
/*    */     tmp507_501[81] = 7;
/*    */     byte[] tmp513_507 = tmp507_501;
/*    */     tmp513_507[82] = 7;
/*    */     byte[] tmp519_513 = tmp513_507;
/*    */     tmp519_513[83] = 7;
/*    */     byte[] tmp525_519 = tmp519_513;
/*    */     tmp525_519[84] = 7;
/*    */     byte[] tmp531_525 = tmp525_519;
/*    */     tmp531_525[85] = 7;
/*    */     byte[] tmp537_531 = tmp531_525;
/*    */     tmp537_531[86] = 7;
/*    */     byte[] tmp543_537 = tmp537_531;
/*    */     tmp543_537[87] = 7;
/*    */     byte[] tmp549_543 = tmp543_537;
/*    */     tmp549_543[88] = 8;
/*    */     byte[] tmp555_549 = tmp549_543;
/*    */     tmp555_549[89] = 7;
/*    */     byte[] tmp561_555 = tmp555_549;
/*    */     tmp561_555[90] = 8;
/*    */     byte[] tmp567_561 = tmp561_555;
/*    */     tmp567_561[91] = 13;
/*    */     byte[] tmp573_567 = tmp567_561;
/*    */     tmp573_567[92] = 19;
/*    */     byte[] tmp579_573 = tmp573_567;
/*    */     tmp579_573[93] = 13;
/*    */     byte[] tmp585_579 = tmp579_573;
/*    */     tmp585_579[94] = 14;
/*    */     byte[] tmp591_585 = tmp585_579;
/*    */     tmp591_585[95] = 6;
/*    */     byte[] tmp597_591 = tmp591_585;
/*    */     tmp597_591[96] = 15;
/*    */     byte[] tmp603_597 = tmp597_591;
/*    */     tmp603_597[97] = 5;
/*    */     byte[] tmp609_603 = tmp603_597;
/*    */     tmp609_603[98] = 6;
/*    */     byte[] tmp615_609 = tmp609_603;
/*    */     tmp615_609[99] = 5;
/*    */     byte[] tmp621_615 = tmp615_609;
/*    */     tmp621_615[100] = 6;
/*    */     byte[] tmp627_621 = tmp621_615;
/*    */     tmp627_621[101] = 5;
/*    */     byte[] tmp633_627 = tmp627_621;
/*    */     tmp633_627[102] = 6;
/*    */     byte[] tmp639_633 = tmp633_627;
/*    */     tmp639_633[103] = 6;
/*    */     byte[] tmp645_639 = tmp639_633;
/*    */     tmp645_639[104] = 6;
/*    */     byte[] tmp651_645 = tmp645_639;
/*    */     tmp651_645[105] = 5;
/*    */     byte[] tmp657_651 = tmp651_645;
/*    */     tmp657_651[106] = 7;
/*    */     byte[] tmp663_657 = tmp657_651;
/*    */     tmp663_657[107] = 7;
/*    */     byte[] tmp669_663 = tmp663_657;
/*    */     tmp669_663[108] = 6;
/*    */     byte[] tmp675_669 = tmp669_663;
/*    */     tmp675_669[109] = 6;
/*    */     byte[] tmp681_675 = tmp675_669;
/*    */     tmp681_675[110] = 6;
/*    */     byte[] tmp687_681 = tmp681_675;
/*    */     tmp687_681[111] = 5;
/*    */     byte[] tmp693_687 = tmp687_681;
/*    */     tmp693_687[112] = 6;
/*    */     byte[] tmp699_693 = tmp693_687;
/*    */     tmp699_693[113] = 7;
/*    */     byte[] tmp705_699 = tmp699_693;
/*    */     tmp705_699[114] = 6;
/*    */     byte[] tmp711_705 = tmp705_699;
/*    */     tmp711_705[115] = 5;
/*    */     byte[] tmp717_711 = tmp711_705;
/*    */     tmp717_711[116] = 5;
/*    */     byte[] tmp723_717 = tmp717_711;
/*    */     tmp723_717[117] = 6;
/*    */     byte[] tmp729_723 = tmp723_717;
/*    */     tmp729_723[118] = 7;
/*    */     byte[] tmp735_729 = tmp729_723;
/*    */     tmp735_729[119] = 7;
/*    */     byte[] tmp741_735 = tmp735_729;
/*    */     tmp741_735[120] = 7;
/*    */     byte[] tmp747_741 = tmp741_735;
/*    */     tmp747_741[121] = 7;
/*    */     byte[] tmp753_747 = tmp747_741;
/*    */     tmp753_747[122] = 7;
/*    */     byte[] tmp759_753 = tmp753_747;
/*    */     tmp759_753[123] = 15;
/*    */     byte[] tmp765_759 = tmp759_753;
/*    */     tmp765_759[124] = 11;
/*    */     byte[] tmp771_765 = tmp765_759;
/*    */     tmp771_765[125] = 14;
/*    */     byte[] tmp777_771 = tmp771_765;
/*    */     tmp777_771[126] = 13;
/*    */     byte[] tmp783_777 = tmp777_771;
/*    */     tmp783_777[127] = 28;
/*    */     byte[] tmp789_783 = tmp783_777;
/*    */     tmp789_783[''] = 20;
/*    */     byte[] tmp796_789 = tmp789_783;
/*    */     tmp796_789[''] = 22;
/*    */     byte[] tmp803_796 = tmp796_789;
/*    */     tmp803_796[''] = 20;
/*    */     byte[] tmp810_803 = tmp803_796;
/*    */     tmp810_803[''] = 20;
/*    */     byte[] tmp817_810 = tmp810_803;
/*    */     tmp817_810[''] = 22;
/*    */     byte[] tmp824_817 = tmp817_810;
/*    */     tmp824_817[''] = 22;
/*    */     byte[] tmp831_824 = tmp824_817;
/*    */     tmp831_824[''] = 22;
/*    */     byte[] tmp838_831 = tmp831_824;
/*    */     tmp838_831[''] = 23;
/*    */     byte[] tmp845_838 = tmp838_831;
/*    */     tmp845_838[''] = 22;
/*    */     byte[] tmp852_845 = tmp845_838;
/*    */     tmp852_845[''] = 23;
/*    */     byte[] tmp859_852 = tmp852_845;
/*    */     tmp859_852[''] = 23;
/*    */     byte[] tmp866_859 = tmp859_852;
/*    */     tmp866_859[''] = 23;
/*    */     byte[] tmp873_866 = tmp866_859;
/*    */     tmp873_866[''] = 23;
/*    */     byte[] tmp880_873 = tmp873_866;
/*    */     tmp880_873[''] = 23;
/*    */     byte[] tmp887_880 = tmp880_873;
/*    */     tmp887_880[''] = 24;
/*    */     byte[] tmp894_887 = tmp887_880;
/*    */     tmp894_887[''] = 23;
/*    */     byte[] tmp901_894 = tmp894_887;
/*    */     tmp901_894[''] = 24;
/*    */     byte[] tmp908_901 = tmp901_894;
/*    */     tmp908_901[''] = 24;
/*    */     byte[] tmp915_908 = tmp908_901;
/*    */     tmp915_908[''] = 22;
/*    */     byte[] tmp922_915 = tmp915_908;
/*    */     tmp922_915[''] = 23;
/*    */     byte[] tmp929_922 = tmp922_915;
/*    */     tmp929_922[''] = 24;
/*    */     byte[] tmp936_929 = tmp929_922;
/*    */     tmp936_929[''] = 23;
/*    */     byte[] tmp943_936 = tmp936_929;
/*    */     tmp943_936[''] = 23;
/*    */     byte[] tmp950_943 = tmp943_936;
/*    */     tmp950_943[''] = 23;
/*    */     byte[] tmp957_950 = tmp950_943;
/*    */     tmp957_950[''] = 23;
/*    */     byte[] tmp964_957 = tmp957_950;
/*    */     tmp964_957[''] = 21;
/*    */     byte[] tmp971_964 = tmp964_957;
/*    */     tmp971_964[''] = 22;
/*    */     byte[] tmp978_971 = tmp971_964;
/*    */     tmp978_971[''] = 23;
/*    */     byte[] tmp985_978 = tmp978_971;
/*    */     tmp985_978[''] = 22;
/*    */     byte[] tmp992_985 = tmp985_978;
/*    */     tmp992_985[''] = 23;
/*    */     byte[] tmp999_992 = tmp992_985;
/*    */     tmp999_992[''] = 23;
/*    */     byte[] tmp1006_999 = tmp999_992;
/*    */     tmp1006_999[''] = 24;
/*    */     byte[] tmp1013_1006 = tmp1006_999;
/*    */     tmp1013_1006[' '] = 22;
/*    */     byte[] tmp1020_1013 = tmp1013_1006;
/*    */     tmp1020_1013['¡'] = 21;
/*    */     byte[] tmp1027_1020 = tmp1020_1013;
/*    */     tmp1027_1020['¢'] = 20;
/*    */     byte[] tmp1034_1027 = tmp1027_1020;
/*    */     tmp1034_1027['£'] = 22;
/*    */     byte[] tmp1041_1034 = tmp1034_1027;
/*    */     tmp1041_1034['¤'] = 22;
/*    */     byte[] tmp1048_1041 = tmp1041_1034;
/*    */     tmp1048_1041['¥'] = 23;
/*    */     byte[] tmp1055_1048 = tmp1048_1041;
/*    */     tmp1055_1048['¦'] = 23;
/*    */     byte[] tmp1062_1055 = tmp1055_1048;
/*    */     tmp1062_1055['§'] = 21;
/*    */     byte[] tmp1069_1062 = tmp1062_1055;
/*    */     tmp1069_1062['¨'] = 23;
/*    */     byte[] tmp1076_1069 = tmp1069_1062;
/*    */     tmp1076_1069['©'] = 22;
/*    */     byte[] tmp1083_1076 = tmp1076_1069;
/*    */     tmp1083_1076['ª'] = 22;
/*    */     byte[] tmp1090_1083 = tmp1083_1076;
/*    */     tmp1090_1083['«'] = 24;
/*    */     byte[] tmp1097_1090 = tmp1090_1083;
/*    */     tmp1097_1090['¬'] = 21;
/*    */     byte[] tmp1104_1097 = tmp1097_1090;
/*    */     tmp1104_1097['­'] = 22;
/*    */     byte[] tmp1111_1104 = tmp1104_1097;
/*    */     tmp1111_1104['®'] = 23;
/*    */     byte[] tmp1118_1111 = tmp1111_1104;
/*    */     tmp1118_1111['¯'] = 23;
/*    */     byte[] tmp1125_1118 = tmp1118_1111;
/*    */     tmp1125_1118['°'] = 21;
/*    */     byte[] tmp1132_1125 = tmp1125_1118;
/*    */     tmp1132_1125['±'] = 21;
/*    */     byte[] tmp1139_1132 = tmp1132_1125;
/*    */     tmp1139_1132['²'] = 22;
/*    */     byte[] tmp1146_1139 = tmp1139_1132;
/*    */     tmp1146_1139['³'] = 21;
/*    */     byte[] tmp1153_1146 = tmp1146_1139;
/*    */     tmp1153_1146['´'] = 23;
/*    */     byte[] tmp1160_1153 = tmp1153_1146;
/*    */     tmp1160_1153['µ'] = 22;
/*    */     byte[] tmp1167_1160 = tmp1160_1153;
/*    */     tmp1167_1160['¶'] = 23;
/*    */     byte[] tmp1174_1167 = tmp1167_1160;
/*    */     tmp1174_1167['·'] = 23;
/*    */     byte[] tmp1181_1174 = tmp1174_1167;
/*    */     tmp1181_1174['¸'] = 20;
/*    */     byte[] tmp1188_1181 = tmp1181_1174;
/*    */     tmp1188_1181['¹'] = 22;
/*    */     byte[] tmp1195_1188 = tmp1188_1181;
/*    */     tmp1195_1188['º'] = 22;
/*    */     byte[] tmp1202_1195 = tmp1195_1188;
/*    */     tmp1202_1195['»'] = 22;
/*    */     byte[] tmp1209_1202 = tmp1202_1195;
/*    */     tmp1209_1202['¼'] = 23;
/*    */     byte[] tmp1216_1209 = tmp1209_1202;
/*    */     tmp1216_1209['½'] = 22;
/*    */     byte[] tmp1223_1216 = tmp1216_1209;
/*    */     tmp1223_1216['¾'] = 22;
/*    */     byte[] tmp1230_1223 = tmp1223_1216;
/*    */     tmp1230_1223['¿'] = 23;
/*    */     byte[] tmp1237_1230 = tmp1230_1223;
/*    */     tmp1237_1230['À'] = 26;
/*    */     byte[] tmp1244_1237 = tmp1237_1230;
/*    */     tmp1244_1237['Á'] = 26;
/*    */     byte[] tmp1251_1244 = tmp1244_1237;
/*    */     tmp1251_1244['Â'] = 20;
/*    */     byte[] tmp1258_1251 = tmp1251_1244;
/*    */     tmp1258_1251['Ã'] = 19;
/*    */     byte[] tmp1265_1258 = tmp1258_1251;
/*    */     tmp1265_1258['Ä'] = 22;
/*    */     byte[] tmp1272_1265 = tmp1265_1258;
/*    */     tmp1272_1265['Å'] = 23;
/*    */     byte[] tmp1279_1272 = tmp1272_1265;
/*    */     tmp1279_1272['Æ'] = 22;
/*    */     byte[] tmp1286_1279 = tmp1279_1272;
/*    */     tmp1286_1279['Ç'] = 25;
/*    */     byte[] tmp1293_1286 = tmp1286_1279;
/*    */     tmp1293_1286['È'] = 26;
/*    */     byte[] tmp1300_1293 = tmp1293_1286;
/*    */     tmp1300_1293['É'] = 26;
/*    */     byte[] tmp1307_1300 = tmp1300_1293;
/*    */     tmp1307_1300['Ê'] = 26;
/*    */     byte[] tmp1314_1307 = tmp1307_1300;
/*    */     tmp1314_1307['Ë'] = 27;
/*    */     byte[] tmp1321_1314 = tmp1314_1307;
/*    */     tmp1321_1314['Ì'] = 27;
/*    */     byte[] tmp1328_1321 = tmp1321_1314;
/*    */     tmp1328_1321['Í'] = 26;
/*    */     byte[] tmp1335_1328 = tmp1328_1321;
/*    */     tmp1335_1328['Î'] = 24;
/*    */     byte[] tmp1342_1335 = tmp1335_1328;
/*    */     tmp1342_1335['Ï'] = 25;
/*    */     byte[] tmp1349_1342 = tmp1342_1335;
/*    */     tmp1349_1342['Ð'] = 19;
/*    */     byte[] tmp1356_1349 = tmp1349_1342;
/*    */     tmp1356_1349['Ñ'] = 21;
/*    */     byte[] tmp1363_1356 = tmp1356_1349;
/*    */     tmp1363_1356['Ò'] = 26;
/*    */     byte[] tmp1370_1363 = tmp1363_1356;
/*    */     tmp1370_1363['Ó'] = 27;
/*    */     byte[] tmp1377_1370 = tmp1370_1363;
/*    */     tmp1377_1370['Ô'] = 27;
/*    */     byte[] tmp1384_1377 = tmp1377_1370;
/*    */     tmp1384_1377['Õ'] = 26;
/*    */     byte[] tmp1391_1384 = tmp1384_1377;
/*    */     tmp1391_1384['Ö'] = 27;
/*    */     byte[] tmp1398_1391 = tmp1391_1384;
/*    */     tmp1398_1391['×'] = 24;
/*    */     byte[] tmp1405_1398 = tmp1398_1391;
/*    */     tmp1405_1398['Ø'] = 21;
/*    */     byte[] tmp1412_1405 = tmp1405_1398;
/*    */     tmp1412_1405['Ù'] = 21;
/*    */     byte[] tmp1419_1412 = tmp1412_1405;
/*    */     tmp1419_1412['Ú'] = 26;
/*    */     byte[] tmp1426_1419 = tmp1419_1412;
/*    */     tmp1426_1419['Û'] = 26;
/*    */     byte[] tmp1433_1426 = tmp1426_1419;
/*    */     tmp1433_1426['Ü'] = 28;
/*    */     byte[] tmp1440_1433 = tmp1433_1426;
/*    */     tmp1440_1433['Ý'] = 27;
/*    */     byte[] tmp1447_1440 = tmp1440_1433;
/*    */     tmp1447_1440['Þ'] = 27;
/*    */     byte[] tmp1454_1447 = tmp1447_1440;
/*    */     tmp1454_1447['ß'] = 27;
/*    */     byte[] tmp1461_1454 = tmp1454_1447;
/*    */     tmp1461_1454['à'] = 20;
/*    */     byte[] tmp1468_1461 = tmp1461_1454;
/*    */     tmp1468_1461['á'] = 24;
/*    */     byte[] tmp1475_1468 = tmp1468_1461;
/*    */     tmp1475_1468['â'] = 20;
/*    */     byte[] tmp1482_1475 = tmp1475_1468;
/*    */     tmp1482_1475['ã'] = 21;
/*    */     byte[] tmp1489_1482 = tmp1482_1475;
/*    */     tmp1489_1482['ä'] = 22;
/*    */     byte[] tmp1496_1489 = tmp1489_1482;
/*    */     tmp1496_1489['å'] = 21;
/*    */     byte[] tmp1503_1496 = tmp1496_1489;
/*    */     tmp1503_1496['æ'] = 21;
/*    */     byte[] tmp1510_1503 = tmp1503_1496;
/*    */     tmp1510_1503['ç'] = 23;
/*    */     byte[] tmp1517_1510 = tmp1510_1503;
/*    */     tmp1517_1510['è'] = 22;
/*    */     byte[] tmp1524_1517 = tmp1517_1510;
/*    */     tmp1524_1517['é'] = 22;
/*    */     byte[] tmp1531_1524 = tmp1524_1517;
/*    */     tmp1531_1524['ê'] = 25;
/*    */     byte[] tmp1538_1531 = tmp1531_1524;
/*    */     tmp1538_1531['ë'] = 25;
/*    */     byte[] tmp1545_1538 = tmp1538_1531;
/*    */     tmp1545_1538['ì'] = 24;
/*    */     byte[] tmp1552_1545 = tmp1545_1538;
/*    */     tmp1552_1545['í'] = 24;
/*    */     byte[] tmp1559_1552 = tmp1552_1545;
/*    */     tmp1559_1552['î'] = 26;
/*    */     byte[] tmp1566_1559 = tmp1559_1552;
/*    */     tmp1566_1559['ï'] = 23;
/*    */     byte[] tmp1573_1566 = tmp1566_1559;
/*    */     tmp1573_1566['ð'] = 26;
/*    */     byte[] tmp1580_1573 = tmp1573_1566;
/*    */     tmp1580_1573['ñ'] = 27;
/*    */     byte[] tmp1587_1580 = tmp1580_1573;
/*    */     tmp1587_1580['ò'] = 26;
/*    */     byte[] tmp1594_1587 = tmp1587_1580;
/*    */     tmp1594_1587['ó'] = 26;
/*    */     byte[] tmp1601_1594 = tmp1594_1587;
/*    */     tmp1601_1594['ô'] = 27;
/*    */     byte[] tmp1608_1601 = tmp1601_1594;
/*    */     tmp1608_1601['õ'] = 27;
/*    */     byte[] tmp1615_1608 = tmp1608_1601;
/*    */     tmp1615_1608['ö'] = 27;
/*    */     byte[] tmp1622_1615 = tmp1615_1608;
/*    */     tmp1622_1615['÷'] = 27;
/*    */     byte[] tmp1629_1622 = tmp1622_1615;
/*    */     tmp1629_1622['ø'] = 27;
/*    */     byte[] tmp1636_1629 = tmp1629_1622;
/*    */     tmp1636_1629['ù'] = 28;
/*    */     byte[] tmp1643_1636 = tmp1636_1629;
/*    */     tmp1643_1636['ú'] = 27;
/*    */     byte[] tmp1650_1643 = tmp1643_1636;
/*    */     tmp1650_1643['û'] = 27;
/*    */     byte[] tmp1657_1650 = tmp1650_1643;
/*    */     tmp1657_1650['ü'] = 27;
/*    */     byte[] tmp1664_1657 = tmp1657_1650;
/*    */     tmp1664_1657['ý'] = 27;
/*    */     byte[] tmp1671_1664 = tmp1664_1657;
/*    */     tmp1671_1664['þ'] = 27;
/*    */     byte[] tmp1678_1671 = tmp1671_1664;
/*    */     tmp1678_1671['ÿ'] = 26;
/*    */     tmp1678_1671;
/*    */     CODE_BIT_COUNTS = arrayOfByte;
/*    */     root = new Node();
/*    */     int j = arrayOfByte.length;
/*    */     for (int i = 0; i < j; i++) localHuffman.addCode(i, CODES[i], CODE_BIT_COUNTS[i]); }
/*    */   private final void addCode(int paramInt1, int paramInt2, int paramInt3) { Node localNode2 = new Node(paramInt1, paramInt3);
/*    */     paramInt1 = paramInt3;
/*    */     Object localObject = root; while (paramInt1 > 8) { paramInt1 -= 8;
/*    */       paramInt3 = paramInt2 >>> paramInt1 & 0xFF;
/*    */       Node[] arrayOfNode = ((Node)localObject).getChildren();
/*    */       kotlin.jvm.internal.Intrinsics.checkNotNull(arrayOfNode);
/*    */       Node localNode1 = arrayOfNode[paramInt3];
/*    */       localObject = localNode1; if (localNode1 == null) { localObject = new Node();
/*    */         arrayOfNode[paramInt3] = localObject; } } paramInt1 = 8 - paramInt1;
/*    */     paramInt2 = paramInt2 << paramInt1 & 0xFF;
/*    */     localObject = ((Node)localObject).getChildren();
/*    */     kotlin.jvm.internal.Intrinsics.checkNotNull(localObject);
/*    */     kotlin.collections.ArraysKt.fill((Object[])localObject, localNode2, paramInt2, paramInt2 + (1 << paramInt1)); }
/*    */   public final void decode(okio.BufferedSource paramBufferedSource, long paramLong, okio.BufferedSink paramBufferedSink) { kotlin.jvm.internal.Intrinsics.checkNotNullParameter(paramBufferedSource, "source");
/*    */     kotlin.jvm.internal.Intrinsics.checkNotNullParameter(paramBufferedSink, "sink");
/*    */     Object localObject1 = root;
/*    */     int j = 0;
/*    */     int i = 0; Object localObject2; int k; for (long l = 0L;; l = 1L + l) { localObject2 = localObject1;
/*    */       k = i; if (l >= paramLong) break; j = j << 8 | okhttp3.internal.Util.and(paramBufferedSource.readByte(), 255);
/*    */       i += 8; while (i >= 8) { localObject1 = ((Node)localObject1).getChildren();
/*    */         kotlin.jvm.internal.Intrinsics.checkNotNull(localObject1);
/*    */         localObject1 = localObject1[(j >>> i - 8 & 0xFF)];
/*    */         kotlin.jvm.internal.Intrinsics.checkNotNull(localObject1); if (((Node)localObject1).getChildren() == null) { paramBufferedSink.writeByte(((Node)localObject1).getSymbol());
/*    */           i -= ((Node)localObject1).getTerminalBitCount();
/*    */           localObject1 = root; } else { i -= 8; } } } while (k > 0) { paramBufferedSource = ((Node)localObject2).getChildren();
/*    */       kotlin.jvm.internal.Intrinsics.checkNotNull(paramBufferedSource);
/*    */       paramBufferedSource = paramBufferedSource[(j << 8 - k & 0xFF)];
/*    */       kotlin.jvm.internal.Intrinsics.checkNotNull(paramBufferedSource); if ((paramBufferedSource.getChildren() != null) || (paramBufferedSource.getTerminalBitCount() > k)) break; paramBufferedSink.writeByte(paramBufferedSource.getSymbol());
/*    */       k -= paramBufferedSource.getTerminalBitCount();
/*    */       localObject2 = root; } }
/*    */   public final void encode(okio.ByteString paramByteString, okio.BufferedSink paramBufferedSink) throws java.io.IOException { kotlin.jvm.internal.Intrinsics.checkNotNullParameter(paramByteString, "source");
/*    */     kotlin.jvm.internal.Intrinsics.checkNotNullParameter(paramBufferedSink, "sink");
/*    */     long l = 0L;
/*    */     int i = 0;
/*    */     int k = paramByteString.size(); for (int j = 0; j < k; j++) { int n = okhttp3.internal.Util.and(paramByteString.getByte(j), 255);
/*    */       int m = CODES[n];
/*    */       n = CODE_BIT_COUNTS[n];
/*    */       l = l << n | m;
/*    */       i += n; while (i >= 8) { i -= 8;
/*    */         paramBufferedSink.writeByte((int)(l >> i)); } } if (i > 0) paramBufferedSink.writeByte((int)(l << 8 - i | 255L >>> i)); }
/*    */   public final int encodedLength(okio.ByteString paramByteString) { kotlin.jvm.internal.Intrinsics.checkNotNullParameter(paramByteString, "bytes");
/*    */     long l = 0L;
/*    */     int j = paramByteString.size(); for (int i = 0; i < j; i++) { int k = okhttp3.internal.Util.and(paramByteString.getByte(i), 255);
/*    */       l += CODE_BIT_COUNTS[k]; } return (int)(7 + l >> 3); }
/* 12 */   private static long[] $d2j$hex$1491a264$decode_J(String src) { byte[] d = $d2j$hex$1491a264$decode_B(src);
/* 13 */     ByteBuffer b = ByteBuffer.wrap(d);
/* 14 */     b.order(java.nio.ByteOrder.LITTLE_ENDIAN);
/* 15 */     java.nio.LongBuffer s = b.asLongBuffer();
/* 16 */     long[] data = new long[d.length / 8];
/* 17 */     s.get(data);
/* 18 */     return data; }
/*    */   
/*    */   private static final int[] CODES;
/*    */   
/* 22 */   private static int[] $d2j$hex$1491a264$decode_I(String src) { byte[] d = $d2j$hex$1491a264$decode_B(src);
/* 23 */     ByteBuffer b = ByteBuffer.wrap(d);
/* 24 */     b.order(java.nio.ByteOrder.LITTLE_ENDIAN);
/* 25 */     java.nio.IntBuffer s = b.asIntBuffer();
/* 26 */     int[] data = new int[d.length / 4];
/* 27 */     s.get(data);
/* 28 */     return data; }
/*    */   
/*    */   private static final byte[] CODE_BIT_COUNTS;
/*    */   
/* 32 */   private static short[] $d2j$hex$1491a264$decode_S(String src) { byte[] d = $d2j$hex$1491a264$decode_B(src);
/* 33 */     ByteBuffer b = ByteBuffer.wrap(d);
/* 34 */     b.order(java.nio.ByteOrder.LITTLE_ENDIAN);
/* 35 */     java.nio.ShortBuffer s = b.asShortBuffer();
/* 36 */     short[] data = new short[d.length / 2];
/* 37 */     s.get(data);
/* 38 */     return data; }
/*    */   
/*    */   public static final Huffman INSTANCE;
/*    */   private static final Node root;
/* 42 */   private static byte[] $d2j$hex$1491a264$decode_B(String src) { char[] d = src.toCharArray();
/* 43 */     byte[] ret = new byte[src.length() / 2];
/* 44 */     for (int i = 0; i < ret.length; i++) {
/* 45 */       char h = d[(2 * i)];
/* 46 */       char l = d[(2 * i + 1)];
/*    */       int hh;
/* 48 */       if ((h >= '0') && (h <= '9')) {
/* 49 */         hh = h - '0'; } else { int hh;
/* 50 */         if ((h >= 'a') && (h <= 'f')) {
/* 51 */           hh = h - 'a' + 10; } else { int hh;
/* 52 */           if ((h >= 'A') && (h <= 'F')) {
/* 53 */             hh = h - 'A' + 10;
/*    */           } else
/* 55 */             throw new RuntimeException(); } }
/*    */       int hh;
/*    */       int ll;
/* 58 */       if ((l >= '0') && (l <= '9')) {
/* 59 */         ll = l - '0'; } else { int ll;
/* 60 */         if ((l >= 'a') && (l <= 'f')) {
/* 61 */           ll = l - 'a' + 10; } else { int ll;
/* 62 */           if ((l >= 'A') && (l <= 'F')) {
/* 63 */             ll = l - 'A' + 10;
/*    */           } else
/* 65 */             throw new RuntimeException(); } }
/*    */       int ll;
/* 67 */       ret[i] = ((byte)(hh << 4 | ll));
/*    */     }
/* 69 */     return ret;
/*    */   }
/*    */   
/*    */   @kotlin.Metadata(bv={1, 0, 3}, d1={"\000\034\n\002\030\002\n\002\020\000\n\002\b\002\n\002\020\b\n\002\b\003\n\002\020\021\n\002\b\b\b\002\030\0002\0020\001B\007\b\026¢\006\002\020\002B\027\b\026\022\006\020\003\032\0020\004\022\006\020\005\032\0020\004¢\006\002\020\006R\035\020\007\032\f\022\006\022\004\030\0010\000\030\0010\b¢\006\n\n\002\020\013\032\004\b\t\020\nR\021\020\003\032\0020\004¢\006\b\n\000\032\004\b\f\020\rR\021\020\016\032\0020\004¢\006\b\n\000\032\004\b\017\020\r¨\006\020"}, d2={"Lokhttp3/internal/http2/Huffman$Node;", "", "()V", "symbol", "", "bits", "(II)V", "children", "", "getChildren", "()[Lokhttp3/internal/http2/Huffman$Node;", "[Lokhttp3/internal/http2/Huffman$Node;", "getSymbol", "()I", "terminalBitCount", "getTerminalBitCount", "okhttp"}, k=1, mv={1, 4, 0})
/*    */   private static final class Node
/*    */   {
/*    */     private final Node[] children;
/*    */     private final int symbol;
/*    */     private final int terminalBitCount;
/*    */     
/*    */     public Node()
/*    */     {
/*    */       this.children = new Node['Ā'];
/*    */       this.symbol = 0;
/*    */       this.terminalBitCount = 0;
/*    */     }
/*    */     
/*    */     public Node(int paramInt1, int paramInt2)
/*    */     {
/*    */       Node[] arrayOfNode = (Node[])null;
/*    */       this.children = null;
/*    */       this.symbol = paramInt1;
/*    */       paramInt1 = paramInt2 & 0x7;
/*    */       if (paramInt1 == 0) {
/*    */         paramInt1 = 8;
/*    */       }
/*    */       this.terminalBitCount = paramInt1;
/*    */     }
/*    */     
/*    */     public final Node[] getChildren()
/*    */     {
/*    */       return this.children;
/*    */     }
/*    */     
/*    */     public final int getSymbol()
/*    */     {
/*    */       return this.symbol;
/*    */     }
/*    */     
/*    */     public final int getTerminalBitCount()
/*    */     {
/*    */       return this.terminalBitCount;
/*    */     }
/*    */   }
/*    */ }


/* Location:              /home/icat/Documents/digital-awareness/src/undangan-pernikahan-dex2jar.jar!/okhttp3/internal/http2/Huffman.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       0.7.1
 */