package kotlin.collections;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.RandomAccess;
import java.util.Set;
import kotlin.Deprecated;
import kotlin.DeprecatedSinceKotlin;
import kotlin.Metadata;
import kotlin.Pair;
import kotlin.ReplaceWith;
import kotlin.TuplesKt;
import kotlin.UInt;
import kotlin.ULong;
import kotlin.Unit;
import kotlin.comparisons.ComparisonsKt;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt.compareBy.2;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt.compareByDescending.1;
import kotlin.jvm.functions.Function0;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.functions.Function2;
import kotlin.jvm.functions.Function3;
import kotlin.jvm.internal.Intrinsics;
import kotlin.jvm.internal.Lambda;
import kotlin.random.Random;
import kotlin.ranges.IntRange;
import kotlin.ranges.RangesKt;
import kotlin.sequences.Sequence;
import kotlin.text.StringsKt;

@Metadata(d1={"\000ê\002\n\000\n\002\020\013\n\000\n\002\020\034\n\000\n\002\030\002\n\002\b\003\n\002\030\002\n\000\n\002\020$\n\002\b\003\n\002\030\002\n\002\b\005\n\002\020%\n\002\b\b\n\002\020\006\n\002\020\005\n\002\b\002\n\002\020\007\n\000\n\002\020\b\n\000\n\002\020\t\n\000\n\002\020\n\n\002\b\002\n\002\020 \n\002\b\t\n\002\030\002\n\002\b\003\n\002\020\036\n\002\b\023\n\002\030\002\n\002\030\002\n\002\b\003\n\002\020\037\n\002\b\002\n\002\030\002\n\002\b\004\n\002\020\000\n\002\b\035\n\002\030\002\n\002\b\006\n\002\020\002\n\002\b\006\n\002\020!\n\000\n\002\030\002\n\002\b\006\n\002\020\"\n\002\b\003\n\002\030\002\n\002\030\002\n\002\b\002\n\002\020\r\n\002\b\006\n\002\020\016\n\002\b\f\n\002\020\017\n\002\b\f\n\002\030\002\n\002\030\002\n\002\b\031\n\002\020\021\n\002\b\016\n\002\030\002\n\002\b\036\n\002\030\002\n\002\b\023\n\002\030\002\n\002\b\002\n\002\030\002\n\002\b\007\n\002\020\030\n\000\n\002\020\022\n\000\n\002\020\031\n\002\020\f\n\002\b\002\n\002\020\023\n\000\n\002\020\024\n\000\n\002\030\002\n\002\030\002\n\000\n\002\020\025\n\002\b\002\n\002\020\026\n\002\b\002\n\002\020#\n\002\b\002\n\002\020\027\n\002\b\005\n\002\030\002\n\002\b\006\0320\020\000\032\0020\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\bø\001\000\032\026\020\006\032\0020\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\0320\020\006\032\0020\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\bø\001\000\032\037\020\007\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\003H\b\032\034\020\b\032\b\022\004\022\002H\0020\t\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032T\020\n\032\016\022\004\022\002H\f\022\004\022\002H\r0\013\"\004\b\000\020\002\"\004\b\001\020\f\"\004\b\002\020\r*\b\022\004\022\002H\0020\0032\036\020\016\032\032\022\004\022\002H\002\022\020\022\016\022\004\022\002H\f\022\004\022\002H\r0\0170\005H\bø\001\000\032B\020\020\032\016\022\004\022\002H\f\022\004\022\002H\0020\013\"\004\b\000\020\002\"\004\b\001\020\f*\b\022\004\022\002H\0020\0032\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\005H\bø\001\000\032\\\020\020\032\016\022\004\022\002H\f\022\004\022\002H\r0\013\"\004\b\000\020\002\"\004\b\001\020\f\"\004\b\002\020\r*\b\022\004\022\002H\0020\0032\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\0052\022\020\022\032\016\022\004\022\002H\002\022\004\022\002H\r0\005H\bø\001\000\032]\020\023\032\002H\024\"\004\b\000\020\002\"\004\b\001\020\f\"\030\b\002\020\024*\022\022\006\b\000\022\002H\f\022\006\b\000\022\002H\0020\025*\b\022\004\022\002H\0020\0032\006\020\026\032\002H\0242\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\005H\bø\001\000¢\006\002\020\027\032w\020\023\032\002H\024\"\004\b\000\020\002\"\004\b\001\020\f\"\004\b\002\020\r\"\030\b\003\020\024*\022\022\006\b\000\022\002H\f\022\006\b\000\022\002H\r0\025*\b\022\004\022\002H\0020\0032\006\020\026\032\002H\0242\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\0052\022\020\022\032\016\022\004\022\002H\002\022\004\022\002H\r0\005H\bø\001\000¢\006\002\020\030\032o\020\031\032\002H\024\"\004\b\000\020\002\"\004\b\001\020\f\"\004\b\002\020\r\"\030\b\003\020\024*\022\022\006\b\000\022\002H\f\022\006\b\000\022\002H\r0\025*\b\022\004\022\002H\0020\0032\006\020\026\032\002H\0242\036\020\016\032\032\022\004\022\002H\002\022\020\022\016\022\004\022\002H\f\022\004\022\002H\r0\0170\005H\bø\001\000¢\006\002\020\027\032B\020\032\032\016\022\004\022\002H\f\022\004\022\002H\r0\013\"\004\b\000\020\f\"\004\b\001\020\r*\b\022\004\022\002H\f0\0032\022\020\033\032\016\022\004\022\002H\f\022\004\022\002H\r0\005H\bø\001\000\032]\020\034\032\002H\024\"\004\b\000\020\f\"\004\b\001\020\r\"\030\b\002\020\024*\022\022\006\b\000\022\002H\f\022\006\b\000\022\002H\r0\025*\b\022\004\022\002H\f0\0032\006\020\026\032\002H\0242\022\020\033\032\016\022\004\022\002H\f\022\004\022\002H\r0\005H\bø\001\000¢\006\002\020\027\032\027\020\035\032\0020\036*\b\022\004\022\0020\0370\003H\007¢\006\002\b \032\027\020\035\032\0020\036*\b\022\004\022\0020\0360\003H\007¢\006\002\b!\032\027\020\035\032\0020\036*\b\022\004\022\0020\"0\003H\007¢\006\002\b#\032\027\020\035\032\0020\036*\b\022\004\022\0020$0\003H\007¢\006\002\b%\032\027\020\035\032\0020\036*\b\022\004\022\0020&0\003H\007¢\006\002\b'\032\027\020\035\032\0020\036*\b\022\004\022\0020(0\003H\007¢\006\002\b)\032,\020*\032\016\022\n\022\b\022\004\022\002H\0020+0+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\020,\032\0020$H\007\032F\020*\032\b\022\004\022\002H-0+\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\006\020,\032\0020$2\030\020\016\032\024\022\n\022\b\022\004\022\002H\0020+\022\004\022\002H-0\005H\007\032\036\020.\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+H\n¢\006\002\020/\032\036\0200\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+H\n¢\006\002\020/\032\036\0201\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+H\n¢\006\002\020/\032\036\0202\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+H\n¢\006\002\020/\032\036\0203\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+H\n¢\006\002\020/\032+\0204\032\0020\001\"\t\b\000\020\002¢\006\002\b5*\b\022\004\022\002H\0020\0032\006\0206\032\002H\002H\002¢\006\002\0207\032\031\0208\032\0020$\"\004\b\000\020\002*\b\022\004\022\002H\00209H\b\032\026\0208\032\0020$\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\0320\0208\032\0020$\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\bø\001\000\032\034\020:\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032<\020;\032\b\022\004\022\002H\0020+\"\004\b\000\020\002\"\004\b\001\020\f*\b\022\004\022\002H\0020\0032\022\020<\032\016\022\004\022\002H\002\022\004\022\002H\f0\005H\bø\001\000\032$\020=\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\020>\032\0020$\032$\020?\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\006\020>\032\0020$\0326\020@\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\bø\001\000\0326\020A\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\bø\001\000\032#\020B\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\020C\032\0020$¢\006\002\020D\032&\020B\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\006\020C\032\0020$H\b¢\006\002\020E\0327\020F\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\020C\032\0020$2\022\020G\032\016\022\004\022\0020$\022\004\022\002H\0020\005¢\006\002\020H\032=\020F\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\006\020C\032\0020$2\022\020G\032\016\022\004\022\0020$\022\004\022\002H\0020\005H\bø\001\000¢\006\002\020I\032%\020J\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\020C\032\0020$¢\006\002\020D\032(\020J\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\006\020C\032\0020$H\b¢\006\002\020E\0326\020K\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\bø\001\000\032K\020L\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032'\020\004\032#\022\023\022\0210$¢\006\f\bN\022\b\bO\022\004\b\b(C\022\004\022\002H\002\022\004\022\0020\0010MH\bø\001\000\032d\020P\032\002HQ\"\004\b\000\020\002\"\020\b\001\020Q*\n\022\006\b\000\022\002H\0020R*\b\022\004\022\002H\0020\0032\006\020\026\032\002HQ2'\020\004\032#\022\023\022\0210$¢\006\f\bN\022\b\bO\022\004\b\b(C\022\004\022\002H\002\022\004\022\0020\0010MH\bø\001\000¢\006\002\020S\032$\020T\032\r\022\t\022\007H-¢\006\002\bU0+\"\006\b\000\020-\030\001*\006\022\002\b\0030\003H\b\0328\020V\032\002HQ\"\006\b\000\020-\030\001\"\020\b\001\020Q*\n\022\006\b\000\022\002H-0R*\006\022\002\b\0030\0032\006\020\026\032\002HQH\b¢\006\002\020W\0326\020X\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\bø\001\000\032\"\020Y\032\b\022\004\022\002H\0020+\"\b\b\000\020\002*\0020Z*\n\022\006\022\004\030\001H\0020\003\032;\020[\032\002HQ\"\020\b\000\020Q*\n\022\006\b\000\022\002H\0020R\"\b\b\001\020\002*\0020Z*\n\022\006\022\004\030\001H\0020\0032\006\020\026\032\002HQ¢\006\002\020W\032O\020\\\032\002HQ\"\004\b\000\020\002\"\020\b\001\020Q*\n\022\006\b\000\022\002H\0020R*\b\022\004\022\002H\0020\0032\006\020\026\032\002HQ2\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\bø\001\000¢\006\002\020]\032O\020^\032\002HQ\"\004\b\000\020\002\"\020\b\001\020Q*\n\022\006\b\000\022\002H\0020R*\b\022\004\022\002H\0020\0032\006\020\026\032\002HQ2\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\bø\001\000¢\006\002\020]\0327\020_\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\bø\001\000¢\006\002\020`\0327\020a\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\bø\001\000¢\006\002\020`\0327\020a\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\bø\001\000¢\006\002\020b\032\033\020c\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\003¢\006\002\020d\0325\020c\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\bø\001\000¢\006\002\020`\032\033\020c\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+¢\006\002\020/\032A\020e\032\002H-\"\004\b\000\020\002\"\b\b\001\020-*\0020Z*\b\022\004\022\002H\0020\0032\024\020\016\032\020\022\004\022\002H\002\022\006\022\004\030\001H-0\005H\bø\001\000¢\006\002\020`\032C\020f\032\004\030\001H-\"\004\b\000\020\002\"\b\b\001\020-*\0020Z*\b\022\004\022\002H\0020\0032\024\020\016\032\020\022\004\022\002H\002\022\006\022\004\030\001H-0\005H\bø\001\000¢\006\002\020`\032\035\020g\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\003¢\006\002\020d\0327\020g\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\bø\001\000¢\006\002\020`\032\035\020g\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+¢\006\002\020/\032B\020h\032\b\022\004\022\002H-0+\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\030\020\016\032\024\022\004\022\002H\002\022\n\022\b\022\004\022\002H-0\0030\005H\bø\001\000\032G\020h\032\b\022\004\022\002H-0+\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\030\020\016\032\024\022\004\022\002H\002\022\n\022\b\022\004\022\002H-0\t0\005H\bø\001\000¢\006\002\bi\032\\\020j\032\b\022\004\022\002H-0+\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032-\020\016\032)\022\023\022\0210$¢\006\f\bN\022\b\bO\022\004\b\b(C\022\004\022\002H\002\022\n\022\b\022\004\022\002H-0\0030MH\bø\001\000¢\006\002\bk\032\\\020j\032\b\022\004\022\002H-0+\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032-\020\016\032)\022\023\022\0210$¢\006\f\bN\022\b\bO\022\004\b\b(C\022\004\022\002H\002\022\n\022\b\022\004\022\002H-0\t0MH\bø\001\000¢\006\002\bl\032r\020m\032\002HQ\"\004\b\000\020\002\"\004\b\001\020-\"\020\b\002\020Q*\n\022\006\b\000\022\002H-0R*\b\022\004\022\002H\0020\0032\006\020\026\032\002HQ2-\020\016\032)\022\023\022\0210$¢\006\f\bN\022\b\bO\022\004\b\b(C\022\004\022\002H\002\022\n\022\b\022\004\022\002H-0\0030MH\bø\001\000¢\006\004\bn\020S\032r\020m\032\002HQ\"\004\b\000\020\002\"\004\b\001\020-\"\020\b\002\020Q*\n\022\006\b\000\022\002H-0R*\b\022\004\022\002H\0020\0032\006\020\026\032\002HQ2-\020\016\032)\022\023\022\0210$¢\006\f\bN\022\b\bO\022\004\b\b(C\022\004\022\002H\002\022\n\022\b\022\004\022\002H-0\t0MH\bø\001\000¢\006\004\bo\020S\032[\020p\032\002HQ\"\004\b\000\020\002\"\004\b\001\020-\"\020\b\002\020Q*\n\022\006\b\000\022\002H-0R*\b\022\004\022\002H\0020\0032\006\020\026\032\002HQ2\030\020\016\032\024\022\004\022\002H\002\022\n\022\b\022\004\022\002H-0\0030\005H\bø\001\000¢\006\002\020]\032]\020p\032\002HQ\"\004\b\000\020\002\"\004\b\001\020-\"\020\b\002\020Q*\n\022\006\b\000\022\002H-0R*\b\022\004\022\002H\0020\0032\006\020\026\032\002HQ2\030\020\016\032\024\022\004\022\002H\002\022\n\022\b\022\004\022\002H-0\t0\005H\bø\001\000¢\006\004\bq\020]\032X\020r\032\002H-\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\006\020s\032\002H-2'\020t\032#\022\023\022\021H-¢\006\f\bN\022\b\bO\022\004\b\b(u\022\004\022\002H\002\022\004\022\002H-0MH\bø\001\000¢\006\002\020v\032m\020w\032\002H-\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\006\020s\032\002H-2<\020t\0328\022\023\022\0210$¢\006\f\bN\022\b\bO\022\004\b\b(C\022\023\022\021H-¢\006\f\bN\022\b\bO\022\004\b\b(u\022\004\022\002H\002\022\004\022\002H-0xH\bø\001\000¢\006\002\020y\032X\020z\032\002H-\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020+2\006\020s\032\002H-2'\020t\032#\022\004\022\002H\002\022\023\022\021H-¢\006\f\bN\022\b\bO\022\004\b\b(u\022\004\022\002H-0MH\bø\001\000¢\006\002\020{\032m\020|\032\002H-\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020+2\006\020s\032\002H-2<\020t\0328\022\023\022\0210$¢\006\f\bN\022\b\bO\022\004\b\b(C\022\004\022\002H\002\022\023\022\021H-¢\006\f\bN\022\b\bO\022\004\b\b(u\022\004\022\002H-0xH\bø\001\000¢\006\002\020}\0321\020~\032\0020\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\023\020\001\032\016\022\004\022\002H\002\022\004\022\00200\005H\bø\001\000\032G\020\001\032\0020\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032(\020\001\032#\022\023\022\0210$¢\006\f\bN\022\b\bO\022\004\b\b(C\022\004\022\002H\002\022\004\022\00200MH\bø\001\000\032>\020\001\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\006\020C\032\0020$2\022\020G\032\016\022\004\022\0020$\022\004\022\002H\0020\005H\bø\001\000¢\006\002\020I\032&\020\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\006\020C\032\0020$¢\006\002\020E\032I\020\001\032\024\022\004\022\002H\f\022\n\022\b\022\004\022\002H\0020+0\013\"\004\b\000\020\002\"\004\b\001\020\f*\b\022\004\022\002H\0020\0032\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\005H\bø\001\000\032c\020\001\032\024\022\004\022\002H\f\022\n\022\b\022\004\022\002H\r0+0\013\"\004\b\000\020\002\"\004\b\001\020\f\"\004\b\002\020\r*\b\022\004\022\002H\0020\0032\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\0052\022\020\022\032\016\022\004\022\002H\002\022\004\022\002H\r0\005H\bø\001\000\032c\020\001\032\002H\024\"\004\b\000\020\002\"\004\b\001\020\f\"\035\b\002\020\024*\027\022\006\b\000\022\002H\f\022\013\022\t\022\004\022\002H\0020\0010\025*\b\022\004\022\002H\0020\0032\006\020\026\032\002H\0242\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\005H\bø\001\000¢\006\002\020\027\032}\020\001\032\002H\024\"\004\b\000\020\002\"\004\b\001\020\f\"\004\b\002\020\r\"\035\b\003\020\024*\027\022\006\b\000\022\002H\f\022\013\022\t\022\004\022\002H\r0\0010\025*\b\022\004\022\002H\0020\0032\006\020\026\032\002H\0242\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\0052\022\020\022\032\016\022\004\022\002H\002\022\004\022\002H\r0\005H\bø\001\000¢\006\002\020\030\032F\020\001\032\017\022\004\022\002H\002\022\004\022\002H\f0\001\"\004\b\000\020\002\"\004\b\001\020\f*\b\022\004\022\002H\0020\0032\024\b\004\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\005H\bø\001\000\032*\020\001\032\0020$\"\t\b\000\020\002¢\006\002\b5*\b\022\004\022\002H\0020\0032\006\0206\032\002H\002¢\006\003\020\001\032*\020\001\032\0020$\"\t\b\000\020\002¢\006\002\b5*\b\022\004\022\002H\0020+2\006\0206\032\002H\002¢\006\003\020\001\0321\020\001\032\0020$\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\bø\001\000\0321\020\001\032\0020$\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\bø\001\000\0321\020\001\032\0020$\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\bø\001\000\0321\020\001\032\0020$\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\bø\001\000\0320\020\001\032\t\022\004\022\002H\0020\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\r\020\001\032\b\022\004\022\002H\0020\003H\004\032\001\020\001\032\003H\001\"\004\b\000\020\002\"\017\b\001\020\001*\b0\001j\003`\001*\b\022\004\022\002H\0020\0032\b\020\001\032\003H\0012\n\b\002\020\001\032\0030\0012\n\b\002\020\001\032\0030\0012\n\b\002\020\001\032\0030\0012\t\b\002\020\001\032\0020$2\n\b\002\020\001\032\0030\0012\027\b\002\020\016\032\021\022\004\022\002H\002\022\005\022\0030\001\030\0010\005¢\006\003\020\001\032l\020\001\032\0030\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\n\b\002\020\001\032\0030\0012\n\b\002\020\001\032\0030\0012\n\b\002\020\001\032\0030\0012\t\b\002\020\001\032\0020$2\n\b\002\020\001\032\0030\0012\027\b\002\020\016\032\021\022\004\022\002H\002\022\005\022\0030\001\030\0010\005\032\034\020\001\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\003¢\006\002\020d\0326\020\001\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\bø\001\000¢\006\002\020`\032\034\020\001\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+¢\006\002\020/\0326\020\001\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\bø\001\000¢\006\002\020b\032*\020 \001\032\0020$\"\t\b\000\020\002¢\006\002\b5*\b\022\004\022\002H\0020\0032\006\0206\032\002H\002¢\006\003\020\001\032*\020 \001\032\0020$\"\t\b\000\020\002¢\006\002\b5*\b\022\004\022\002H\0020+2\006\0206\032\002H\002¢\006\003\020\001\032\036\020¡\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\003¢\006\002\020d\0328\020¡\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\bø\001\000¢\006\002\020`\032\036\020¡\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+¢\006\002\020/\0328\020¡\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\bø\001\000¢\006\002\020b\032=\020¢\001\032\b\022\004\022\002H-0+\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\022\020\016\032\016\022\004\022\002H\002\022\004\022\002H-0\005H\bø\001\000\032R\020£\001\032\b\022\004\022\002H-0+\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032'\020\016\032#\022\023\022\0210$¢\006\f\bN\022\b\bO\022\004\b\b(C\022\004\022\002H\002\022\004\022\002H-0MH\bø\001\000\032X\020¤\001\032\b\022\004\022\002H-0+\"\004\b\000\020\002\"\b\b\001\020-*\0020Z*\b\022\004\022\002H\0020\0032)\020\016\032%\022\023\022\0210$¢\006\f\bN\022\b\bO\022\004\b\b(C\022\004\022\002H\002\022\006\022\004\030\001H-0MH\bø\001\000\032q\020¥\001\032\002HQ\"\004\b\000\020\002\"\b\b\001\020-*\0020Z\"\020\b\002\020Q*\n\022\006\b\000\022\002H-0R*\b\022\004\022\002H\0020\0032\006\020\026\032\002HQ2)\020\016\032%\022\023\022\0210$¢\006\f\bN\022\b\bO\022\004\b\b(C\022\004\022\002H\002\022\006\022\004\030\001H-0MH\bø\001\000¢\006\002\020S\032k\020¦\001\032\002HQ\"\004\b\000\020\002\"\004\b\001\020-\"\020\b\002\020Q*\n\022\006\b\000\022\002H-0R*\b\022\004\022\002H\0020\0032\006\020\026\032\002HQ2'\020\016\032#\022\023\022\0210$¢\006\f\bN\022\b\bO\022\004\b\b(C\022\004\022\002H\002\022\004\022\002H-0MH\bø\001\000¢\006\002\020S\032C\020§\001\032\b\022\004\022\002H-0+\"\004\b\000\020\002\"\b\b\001\020-*\0020Z*\b\022\004\022\002H\0020\0032\024\020\016\032\020\022\004\022\002H\002\022\006\022\004\030\001H-0\005H\bø\001\000\032\\\020¨\001\032\002HQ\"\004\b\000\020\002\"\b\b\001\020-*\0020Z\"\020\b\002\020Q*\n\022\006\b\000\022\002H-0R*\b\022\004\022\002H\0020\0032\006\020\026\032\002HQ2\024\020\016\032\020\022\004\022\002H\002\022\006\022\004\030\001H-0\005H\bø\001\000¢\006\002\020]\032V\020©\001\032\002HQ\"\004\b\000\020\002\"\004\b\001\020-\"\020\b\002\020Q*\n\022\006\b\000\022\002H-0R*\b\022\004\022\002H\0020\0032\006\020\026\032\002HQ2\022\020\016\032\016\022\004\022\002H\002\022\004\022\002H-0\005H\bø\001\000¢\006\002\020]\032-\020ª\001\032\002H\002\"\017\b\000\020\002*\t\022\004\022\002H\0020«\001*\b\022\004\022\002H\0020\003H\007¢\006\006\b¬\001\020­\001\032\031\020ª\001\032\0020\036*\b\022\004\022\0020\0360\003H\007¢\006\003\b¬\001\032\031\020ª\001\032\0020\"*\b\022\004\022\0020\"0\003H\007¢\006\003\b¬\001\032J\020®\001\032\002H\002\"\004\b\000\020\002\"\017\b\001\020-*\t\022\004\022\002H-0«\001*\b\022\004\022\002H\0020\0032\022\020<\032\016\022\004\022\002H\002\022\004\022\002H-0\005H\bø\001\000¢\006\005\b¯\001\020`\032I\020°\001\032\004\030\001H\002\"\004\b\000\020\002\"\017\b\001\020-*\t\022\004\022\002H-0«\001*\b\022\004\022\002H\0020\0032\022\020<\032\016\022\004\022\002H\002\022\004\022\002H-0\005H\bø\001\000¢\006\002\020`\032H\020±\001\032\002H-\"\004\b\000\020\002\"\017\b\001\020-*\t\022\004\022\002H-0«\001*\b\022\004\022\002H\0020\0032\022\020<\032\016\022\004\022\002H\002\022\004\022\002H-0\005H\bø\001\000¢\006\003\020²\001\0321\020±\001\032\0020\036\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020<\032\016\022\004\022\002H\002\022\004\022\0020\0360\005H\bø\001\000\0321\020±\001\032\0020\"\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020<\032\016\022\004\022\002H\002\022\004\022\0020\"0\005H\bø\001\000\032J\020³\001\032\004\030\001H-\"\004\b\000\020\002\"\017\b\001\020-*\t\022\004\022\002H-0«\001*\b\022\004\022\002H\0020\0032\022\020<\032\016\022\004\022\002H\002\022\004\022\002H-0\005H\bø\001\000¢\006\003\020²\001\0329\020³\001\032\004\030\0010\036\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020<\032\016\022\004\022\002H\002\022\004\022\0020\0360\005H\bø\001\000¢\006\003\020´\001\0329\020³\001\032\004\030\0010\"\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020<\032\016\022\004\022\002H\002\022\004\022\0020\"0\005H\bø\001\000¢\006\003\020µ\001\032\\\020¶\001\032\002H-\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\035\020·\001\032\030\022\006\b\000\022\002H-0¸\001j\013\022\006\b\000\022\002H-`¹\0012\022\020<\032\016\022\004\022\002H\002\022\004\022\002H-0\005H\bø\001\000¢\006\003\020º\001\032^\020»\001\032\004\030\001H-\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\035\020·\001\032\030\022\006\b\000\022\002H-0¸\001j\013\022\006\b\000\022\002H-`¹\0012\022\020<\032\016\022\004\022\002H\002\022\004\022\002H-0\005H\bø\001\000¢\006\003\020º\001\032,\020¼\001\032\004\030\001H\002\"\017\b\000\020\002*\t\022\004\022\002H\0020«\001*\b\022\004\022\002H\0020\003H\007¢\006\003\020­\001\032\033\020¼\001\032\004\030\0010\036*\b\022\004\022\0020\0360\003H\007¢\006\003\020½\001\032\033\020¼\001\032\004\030\0010\"*\b\022\004\022\0020\"0\003H\007¢\006\003\020¾\001\032A\020¿\001\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\035\020·\001\032\030\022\006\b\000\022\002H\0020¸\001j\013\022\006\b\000\022\002H\002`¹\001H\007¢\006\006\bÀ\001\020Á\001\032@\020Â\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\035\020·\001\032\030\022\006\b\000\022\002H\0020¸\001j\013\022\006\b\000\022\002H\002`¹\001H\007¢\006\003\020Á\001\032-\020Ã\001\032\002H\002\"\017\b\000\020\002*\t\022\004\022\002H\0020«\001*\b\022\004\022\002H\0020\003H\007¢\006\006\bÄ\001\020­\001\032\031\020Ã\001\032\0020\036*\b\022\004\022\0020\0360\003H\007¢\006\003\bÄ\001\032\031\020Ã\001\032\0020\"*\b\022\004\022\0020\"0\003H\007¢\006\003\bÄ\001\032J\020Å\001\032\002H\002\"\004\b\000\020\002\"\017\b\001\020-*\t\022\004\022\002H-0«\001*\b\022\004\022\002H\0020\0032\022\020<\032\016\022\004\022\002H\002\022\004\022\002H-0\005H\bø\001\000¢\006\005\bÆ\001\020`\032I\020Ç\001\032\004\030\001H\002\"\004\b\000\020\002\"\017\b\001\020-*\t\022\004\022\002H-0«\001*\b\022\004\022\002H\0020\0032\022\020<\032\016\022\004\022\002H\002\022\004\022\002H-0\005H\bø\001\000¢\006\002\020`\032H\020È\001\032\002H-\"\004\b\000\020\002\"\017\b\001\020-*\t\022\004\022\002H-0«\001*\b\022\004\022\002H\0020\0032\022\020<\032\016\022\004\022\002H\002\022\004\022\002H-0\005H\bø\001\000¢\006\003\020²\001\0321\020È\001\032\0020\036\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020<\032\016\022\004\022\002H\002\022\004\022\0020\0360\005H\bø\001\000\0321\020È\001\032\0020\"\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020<\032\016\022\004\022\002H\002\022\004\022\0020\"0\005H\bø\001\000\032J\020É\001\032\004\030\001H-\"\004\b\000\020\002\"\017\b\001\020-*\t\022\004\022\002H-0«\001*\b\022\004\022\002H\0020\0032\022\020<\032\016\022\004\022\002H\002\022\004\022\002H-0\005H\bø\001\000¢\006\003\020²\001\0329\020É\001\032\004\030\0010\036\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020<\032\016\022\004\022\002H\002\022\004\022\0020\0360\005H\bø\001\000¢\006\003\020´\001\0329\020É\001\032\004\030\0010\"\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020<\032\016\022\004\022\002H\002\022\004\022\0020\"0\005H\bø\001\000¢\006\003\020µ\001\032\\\020Ê\001\032\002H-\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\035\020·\001\032\030\022\006\b\000\022\002H-0¸\001j\013\022\006\b\000\022\002H-`¹\0012\022\020<\032\016\022\004\022\002H\002\022\004\022\002H-0\005H\bø\001\000¢\006\003\020º\001\032^\020Ë\001\032\004\030\001H-\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\035\020·\001\032\030\022\006\b\000\022\002H-0¸\001j\013\022\006\b\000\022\002H-`¹\0012\022\020<\032\016\022\004\022\002H\002\022\004\022\002H-0\005H\bø\001\000¢\006\003\020º\001\032,\020Ì\001\032\004\030\001H\002\"\017\b\000\020\002*\t\022\004\022\002H\0020«\001*\b\022\004\022\002H\0020\003H\007¢\006\003\020­\001\032\033\020Ì\001\032\004\030\0010\036*\b\022\004\022\0020\0360\003H\007¢\006\003\020½\001\032\033\020Ì\001\032\004\030\0010\"*\b\022\004\022\0020\"0\003H\007¢\006\003\020¾\001\032A\020Í\001\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\035\020·\001\032\030\022\006\b\000\022\002H\0020¸\001j\013\022\006\b\000\022\002H\002`¹\001H\007¢\006\006\bÎ\001\020Á\001\032@\020Ï\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\035\020·\001\032\030\022\006\b\000\022\002H\0020¸\001j\013\022\006\b\000\022\002H\002`¹\001H\007¢\006\003\020Á\001\032.\020Ð\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\0206\032\002H\002H\002¢\006\003\020Ñ\001\0328\020Ð\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\020\020Ò\001\032\013\022\006\b\001\022\002H\0020Ó\001H\002¢\006\003\020Ô\001\032/\020Ð\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\r\020Ò\001\032\b\022\004\022\002H\0020\003H\002\032/\020Ð\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\r\020Ò\001\032\b\022\004\022\002H\0020\tH\002\032.\020Õ\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\0206\032\002H\002H\b¢\006\003\020Ñ\001\032\027\020Ö\001\032\0020\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\0321\020Ö\001\032\0020\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\bø\001\000\032B\020×\001\032\002HQ\"\004\b\000\020\002\"\016\b\001\020Q*\b\022\004\022\002H\0020\003*\002HQ2\023\020\001\032\016\022\004\022\002H\002\022\004\022\00200\005H\bø\001\000¢\006\003\020Ø\001\032W\020Ù\001\032\002HQ\"\004\b\000\020\002\"\016\b\001\020Q*\b\022\004\022\002H\0020\003*\002HQ2(\020\001\032#\022\023\022\0210$¢\006\f\bN\022\b\bO\022\004\b\b(C\022\004\022\002H\002\022\004\022\00200MH\bø\001\000¢\006\003\020Ú\001\032I\020Û\001\032\032\022\n\022\b\022\004\022\002H\0020+\022\n\022\b\022\004\022\002H\0020+0\017\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\bø\001\000\032.\020Ü\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\002092\006\0206\032\002H\002H\002¢\006\003\020Ý\001\0328\020Ü\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\002092\020\020Ò\001\032\013\022\006\b\001\022\002H\0020Ó\001H\002¢\006\003\020Þ\001\032/\020Ü\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\002092\r\020Ò\001\032\b\022\004\022\002H\0020\003H\002\032/\020Ü\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\002092\r\020Ò\001\032\b\022\004\022\002H\0020\tH\002\032.\020Ü\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\0206\032\002H\002H\002¢\006\003\020Ñ\001\0328\020Ü\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\020\020Ò\001\032\013\022\006\b\001\022\002H\0020Ó\001H\002¢\006\003\020Ô\001\032/\020Ü\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\r\020Ò\001\032\b\022\004\022\002H\0020\003H\002\032/\020Ü\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\r\020Ò\001\032\b\022\004\022\002H\0020\tH\002\032.\020ß\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\002092\006\0206\032\002H\002H\b¢\006\003\020Ý\001\032.\020ß\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\0206\032\002H\002H\b¢\006\003\020Ñ\001\032 \020à\001\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\00209H\b¢\006\003\020á\001\032)\020à\001\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\002092\b\020à\001\032\0030â\001H\007¢\006\003\020ã\001\032\"\020ä\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\00209H\b¢\006\003\020á\001\032+\020ä\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\002092\b\020à\001\032\0030â\001H\007¢\006\003\020ã\001\032[\020å\001\032\003Hæ\001\"\005\b\000\020æ\001\"\t\b\001\020\002*\003Hæ\001*\b\022\004\022\002H\0020\0032)\020t\032%\022\024\022\022Hæ\001¢\006\f\bN\022\b\bO\022\004\b\b(u\022\004\022\002H\002\022\005\022\003Hæ\0010MH\bø\001\000¢\006\003\020ç\001\032p\020è\001\032\003Hæ\001\"\005\b\000\020æ\001\"\t\b\001\020\002*\003Hæ\001*\b\022\004\022\002H\0020\0032>\020t\032:\022\023\022\0210$¢\006\f\bN\022\b\bO\022\004\b\b(C\022\024\022\022Hæ\001¢\006\f\bN\022\b\bO\022\004\b\b(u\022\004\022\002H\002\022\005\022\003Hæ\0010xH\bø\001\000¢\006\003\020é\001\032r\020ê\001\032\005\030\001Hæ\001\"\005\b\000\020æ\001\"\t\b\001\020\002*\003Hæ\001*\b\022\004\022\002H\0020\0032>\020t\032:\022\023\022\0210$¢\006\f\bN\022\b\bO\022\004\b\b(C\022\024\022\022Hæ\001¢\006\f\bN\022\b\bO\022\004\b\b(u\022\004\022\002H\002\022\005\022\003Hæ\0010xH\bø\001\000¢\006\003\020é\001\032]\020ë\001\032\005\030\001Hæ\001\"\005\b\000\020æ\001\"\t\b\001\020\002*\003Hæ\001*\b\022\004\022\002H\0020\0032)\020t\032%\022\024\022\022Hæ\001¢\006\f\bN\022\b\bO\022\004\b\b(u\022\004\022\002H\002\022\005\022\003Hæ\0010MH\bø\001\000¢\006\003\020ç\001\032[\020ì\001\032\003Hæ\001\"\005\b\000\020æ\001\"\t\b\001\020\002*\003Hæ\001*\b\022\004\022\002H\0020+2)\020t\032%\022\004\022\002H\002\022\024\022\022Hæ\001¢\006\f\bN\022\b\bO\022\004\b\b(u\022\005\022\003Hæ\0010MH\bø\001\000¢\006\003\020í\001\032p\020î\001\032\003Hæ\001\"\005\b\000\020æ\001\"\t\b\001\020\002*\003Hæ\001*\b\022\004\022\002H\0020+2>\020t\032:\022\023\022\0210$¢\006\f\bN\022\b\bO\022\004\b\b(C\022\004\022\002H\002\022\024\022\022Hæ\001¢\006\f\bN\022\b\bO\022\004\b\b(u\022\005\022\003Hæ\0010xH\bø\001\000¢\006\003\020ï\001\032r\020ð\001\032\005\030\001Hæ\001\"\005\b\000\020æ\001\"\t\b\001\020\002*\003Hæ\001*\b\022\004\022\002H\0020+2>\020t\032:\022\023\022\0210$¢\006\f\bN\022\b\bO\022\004\b\b(C\022\004\022\002H\002\022\024\022\022Hæ\001¢\006\f\bN\022\b\bO\022\004\b\b(u\022\005\022\003Hæ\0010xH\bø\001\000¢\006\003\020ï\001\032]\020ñ\001\032\005\030\001Hæ\001\"\005\b\000\020æ\001\"\t\b\001\020\002*\003Hæ\001*\b\022\004\022\002H\0020+2)\020t\032%\022\004\022\002H\002\022\024\022\022Hæ\001¢\006\f\bN\022\b\bO\022\004\b\b(u\022\005\022\003Hæ\0010MH\bø\001\000¢\006\003\020í\001\032#\020ò\001\032\b\022\004\022\002H\0020\003\"\b\b\000\020\002*\0020Z*\n\022\006\022\004\030\001H\0020\003\032#\020ò\001\032\b\022\004\022\002H\0020+\"\b\b\000\020\002*\0020Z*\n\022\006\022\004\030\001H\0020+\032\035\020ó\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032`\020ô\001\032\b\022\004\022\002H-0+\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\006\020s\032\002H-2'\020t\032#\022\023\022\021H-¢\006\f\bN\022\b\bO\022\004\b\b(u\022\004\022\002H\002\022\004\022\002H-0MH\bø\001\000¢\006\003\020õ\001\032u\020ö\001\032\b\022\004\022\002H-0+\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\006\020s\032\002H-2<\020t\0328\022\023\022\0210$¢\006\f\bN\022\b\bO\022\004\b\b(C\022\023\022\021H-¢\006\f\bN\022\b\bO\022\004\b\b(u\022\004\022\002H\002\022\004\022\002H-0xH\bø\001\000¢\006\003\020÷\001\032[\020ø\001\032\t\022\005\022\003Hæ\0010+\"\005\b\000\020æ\001\"\t\b\001\020\002*\003Hæ\001*\b\022\004\022\002H\0020\0032)\020t\032%\022\024\022\022Hæ\001¢\006\f\bN\022\b\bO\022\004\b\b(u\022\004\022\002H\002\022\005\022\003Hæ\0010MH\bø\001\000\032p\020ù\001\032\t\022\005\022\003Hæ\0010+\"\005\b\000\020æ\001\"\t\b\001\020\002*\003Hæ\001*\b\022\004\022\002H\0020\0032>\020t\032:\022\023\022\0210$¢\006\f\bN\022\b\bO\022\004\b\b(C\022\024\022\022Hæ\001¢\006\f\bN\022\b\bO\022\004\b\b(u\022\004\022\002H\002\022\005\022\003Hæ\0010xH\bø\001\000\032`\020ú\001\032\b\022\004\022\002H-0+\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\006\020s\032\002H-2'\020t\032#\022\023\022\021H-¢\006\f\bN\022\b\bO\022\004\b\b(u\022\004\022\002H\002\022\004\022\002H-0MH\bø\001\000¢\006\003\020õ\001\032u\020û\001\032\b\022\004\022\002H-0+\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\006\020s\032\002H-2<\020t\0328\022\023\022\0210$¢\006\f\bN\022\b\bO\022\004\b\b(C\022\023\022\021H-¢\006\f\bN\022\b\bO\022\004\b\b(u\022\004\022\002H\002\022\004\022\002H-0xH\bø\001\000¢\006\003\020÷\001\032$\020ü\001\032\0020\"\004\b\000\020\002*\t\022\004\022\002H\0020\0012\b\020à\001\032\0030â\001H\007\032\034\020ý\001\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\003¢\006\002\020d\0326\020ý\001\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\bø\001\000¢\006\002\020`\032\034\020ý\001\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+¢\006\002\020/\032\036\020þ\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\003¢\006\002\020d\0328\020þ\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\bø\001\000¢\006\002\020`\032\036\020þ\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+¢\006\002\020/\032,\020ÿ\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\r\020\002\032\b\022\004\022\0020$0\003\032'\020ÿ\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\b\020\002\032\0030\002\032G\020\002\032\0020\"\004\b\000\020\002\"\017\b\001\020-*\t\022\004\022\002H-0«\001*\t\022\004\022\002H\0020\0012\026\b\004\020<\032\020\022\004\022\002H\002\022\006\022\004\030\001H-0\005H\bø\001\000\032G\020\002\032\0020\"\004\b\000\020\002\"\017\b\001\020-*\t\022\004\022\002H-0«\001*\t\022\004\022\002H\0020\0012\026\b\004\020<\032\020\022\004\022\002H\002\022\006\022\004\030\001H-0\005H\bø\001\000\032#\020\002\032\0020\"\017\b\000\020\002*\t\022\004\022\002H\0020«\001*\t\022\004\022\002H\0020\001\032(\020\002\032\b\022\004\022\002H\0020+\"\017\b\000\020\002*\t\022\004\022\002H\0020«\001*\b\022\004\022\002H\0020\003\032L\020\002\032\b\022\004\022\002H\0020+\"\004\b\000\020\002\"\017\b\001\020-*\t\022\004\022\002H-0«\001*\b\022\004\022\002H\0020\0032\026\b\004\020<\032\020\022\004\022\002H\002\022\006\022\004\030\001H-0\005H\bø\001\000\032L\020\002\032\b\022\004\022\002H\0020+\"\004\b\000\020\002\"\017\b\001\020-*\t\022\004\022\002H-0«\001*\b\022\004\022\002H\0020\0032\026\b\004\020<\032\020\022\004\022\002H\002\022\006\022\004\030\001H-0\005H\bø\001\000\032(\020\002\032\b\022\004\022\002H\0020+\"\017\b\000\020\002*\t\022\004\022\002H\0020«\001*\b\022\004\022\002H\0020\003\032<\020\002\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\035\020·\001\032\030\022\006\b\000\022\002H\0020¸\001j\013\022\006\b\000\022\002H\002`¹\001\0320\020\002\032\t\022\004\022\002H\0020\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\r\020\001\032\b\022\004\022\002H\0020\003H\004\032\031\020\002\032\0020$*\b\022\004\022\0020\0370\003H\007¢\006\003\b\002\032\031\020\002\032\0020\036*\b\022\004\022\0020\0360\003H\007¢\006\003\b\002\032\031\020\002\032\0020\"*\b\022\004\022\0020\"0\003H\007¢\006\003\b\002\032\031\020\002\032\0020$*\b\022\004\022\0020$0\003H\007¢\006\003\b\002\032\031\020\002\032\0020&*\b\022\004\022\0020&0\003H\007¢\006\003\b\002\032\031\020\002\032\0020$*\b\022\004\022\0020(0\003H\007¢\006\003\b\002\0321\020\002\032\0020$\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020<\032\016\022\004\022\002H\002\022\004\022\0020$0\005H\bø\001\000\0321\020\002\032\0020\036\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020<\032\016\022\004\022\002H\002\022\004\022\0020\0360\005H\bø\001\000\0327\020\002\032\0020\036\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020<\032\016\022\004\022\002H\002\022\004\022\0020\0360\005H\bø\001\000¢\006\003\b\002\0327\020\002\032\0020$\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020<\032\016\022\004\022\002H\002\022\004\022\0020$0\005H\bø\001\000¢\006\003\b\002\0327\020\002\032\0020&\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020<\032\016\022\004\022\002H\002\022\004\022\0020&0\005H\bø\001\000¢\006\003\b\002\032?\020\002\032\0030\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\023\020<\032\017\022\004\022\002H\002\022\005\022\0030\0020\005H\bø\001\000ø\001\001¢\006\006\b\002\020\002\032?\020\002\032\0030\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\023\020<\032\017\022\004\022\002H\002\022\005\022\0030\0020\005H\bø\001\000ø\001\001¢\006\006\b\002\020\002\032%\020\002\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\020>\032\0020$\032%\020\002\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\006\020>\032\0020$\0327\020\002\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\bø\001\000\0327\020\002\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\bø\001\000\032\022\020\002\032\0030 \002*\b\022\004\022\0020\00109\032\022\020¡\002\032\0030¢\002*\b\022\004\022\0020\03709\032\023\020£\002\032\0030¤\002*\t\022\005\022\0030¥\00209\0326\020¦\002\032\002HQ\"\004\b\000\020\002\"\020\b\001\020Q*\n\022\006\b\000\022\002H\0020R*\b\022\004\022\002H\0020\0032\006\020\026\032\002HQ¢\006\002\020W\032\022\020§\002\032\0030¨\002*\b\022\004\022\0020\03609\032\022\020©\002\032\0030ª\002*\b\022\004\022\0020\"09\032)\020«\002\032\024\022\004\022\002H\0020¬\002j\t\022\004\022\002H\002`­\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032\022\020®\002\032\0030¯\002*\b\022\004\022\0020$09\032\035\020°\002\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032\022\020±\002\032\0030²\002*\b\022\004\022\0020&09\032\036\020³\002\032\t\022\004\022\002H\0020\001\"\004\b\000\020\002*\b\022\004\022\002H\00209\032\036\020³\002\032\t\022\004\022\002H\0020\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032\036\020´\002\032\t\022\004\022\002H\0020µ\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032\036\020¶\002\032\t\022\004\022\002H\0020\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032\022\020·\002\032\0030¸\002*\b\022\004\022\0020(09\0320\020¹\002\032\t\022\004\022\002H\0020\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\r\020\001\032\b\022\004\022\002H\0020\003H\004\032C\020º\002\032\016\022\n\022\b\022\004\022\002H\0020+0+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\020,\032\0020$2\t\b\002\020»\002\032\0020$2\t\b\002\020¼\002\032\0020\001H\007\032]\020º\002\032\b\022\004\022\002H-0+\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\006\020,\032\0020$2\t\b\002\020»\002\032\0020$2\t\b\002\020¼\002\032\0020\0012\030\020\016\032\024\022\n\022\b\022\004\022\002H\0020+\022\004\022\002H-0\005H\007\032$\020½\002\032\017\022\013\022\t\022\004\022\002H\0020¾\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032J\020¿\002\032\024\022\020\022\016\022\004\022\002H\002\022\004\022\002H-0\0170+\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\020\020\001\032\013\022\006\b\001\022\002H-0Ó\001H\004¢\006\003\020Ô\001\032\001\020¿\002\032\b\022\004\022\002H\r0+\"\004\b\000\020\002\"\004\b\001\020-\"\004\b\002\020\r*\b\022\004\022\002H\0020\0032\020\020\001\032\013\022\006\b\001\022\002H-0Ó\00128\020\016\0324\022\024\022\022H\002¢\006\r\bN\022\t\bO\022\005\b\b(À\002\022\024\022\022H-¢\006\r\bN\022\t\bO\022\005\b\b(Á\002\022\004\022\002H\r0MH\bø\001\000¢\006\003\020Â\002\032A\020¿\002\032\024\022\020\022\016\022\004\022\002H\002\022\004\022\002H-0\0170+\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\r\020\001\032\b\022\004\022\002H-0\003H\004\032x\020¿\002\032\b\022\004\022\002H\r0+\"\004\b\000\020\002\"\004\b\001\020-\"\004\b\002\020\r*\b\022\004\022\002H\0020\0032\r\020\001\032\b\022\004\022\002H-0\00328\020\016\0324\022\024\022\022H\002¢\006\r\bN\022\t\bO\022\005\b\b(À\002\022\024\022\022H-¢\006\r\bN\022\t\bO\022\005\b\b(Á\002\022\004\022\002H\r0MH\bø\001\000\032+\020Ã\002\032\024\022\020\022\016\022\004\022\002H\002\022\004\022\002H\0020\0170+\"\004\b\000\020\002*\b\022\004\022\002H\0020\003H\007\032c\020Ã\002\032\b\022\004\022\002H-0+\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\00328\020\016\0324\022\024\022\022H\002¢\006\r\bN\022\t\bO\022\005\b\b(À\002\022\024\022\022H\002¢\006\r\bN\022\t\bO\022\005\b\b(Á\002\022\004\022\002H-0MH\bø\001\000\002\013\n\005\b20\001\n\002\b\031¨\006Ä\002"}, d2={"all", "", "T", "", "predicate", "Lkotlin/Function1;", "any", "asIterable", "asSequence", "Lkotlin/sequences/Sequence;", "associate", "", "K", "V", "transform", "Lkotlin/Pair;", "associateBy", "keySelector", "valueTransform", "associateByTo", "M", "", "destination", "(Ljava/lang/Iterable;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "(Ljava/lang/Iterable;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "associateTo", "associateWith", "valueSelector", "associateWithTo", "average", "", "", "averageOfByte", "averageOfDouble", "", "averageOfFloat", "", "averageOfInt", "", "averageOfLong", "", "averageOfShort", "chunked", "", "size", "R", "component1", "(Ljava/util/List;)Ljava/lang/Object;", "component2", "component3", "component4", "component5", "contains", "Lkotlin/internal/OnlyInputTypes;", "element", "(Ljava/lang/Iterable;Ljava/lang/Object;)Z", "count", "", "distinct", "distinctBy", "selector", "drop", "n", "dropLast", "dropLastWhile", "dropWhile", "elementAt", "index", "(Ljava/lang/Iterable;I)Ljava/lang/Object;", "(Ljava/util/List;I)Ljava/lang/Object;", "elementAtOrElse", "defaultValue", "(Ljava/lang/Iterable;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "(Ljava/util/List;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "elementAtOrNull", "filter", "filterIndexed", "Lkotlin/Function2;", "Lkotlin/ParameterName;", "name", "filterIndexedTo", "C", "", "(Ljava/lang/Iterable;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "filterIsInstance", "Lkotlin/internal/NoInfer;", "filterIsInstanceTo", "(Ljava/lang/Iterable;Ljava/util/Collection;)Ljava/util/Collection;", "filterNot", "filterNotNull", "", "filterNotNullTo", "filterNotTo", "(Ljava/lang/Iterable;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "filterTo", "find", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "findLast", "(Ljava/util/List;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "first", "(Ljava/lang/Iterable;)Ljava/lang/Object;", "firstNotNullOf", "firstNotNullOfOrNull", "firstOrNull", "flatMap", "flatMapSequence", "flatMapIndexed", "flatMapIndexedIterable", "flatMapIndexedSequence", "flatMapIndexedTo", "flatMapIndexedIterableTo", "flatMapIndexedSequenceTo", "flatMapTo", "flatMapSequenceTo", "fold", "initial", "operation", "acc", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldIndexed", "Lkotlin/Function3;", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "foldRight", "(Ljava/util/List;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldRightIndexed", "(Ljava/util/List;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "forEach", "", "action", "forEachIndexed", "getOrElse", "getOrNull", "groupBy", "groupByTo", "", "groupingBy", "Lkotlin/collections/Grouping;", "indexOf", "(Ljava/lang/Iterable;Ljava/lang/Object;)I", "(Ljava/util/List;Ljava/lang/Object;)I", "indexOfFirst", "indexOfLast", "intersect", "", "other", "joinTo", "A", "Ljava/lang/Appendable;", "Lkotlin/text/Appendable;", "buffer", "separator", "", "prefix", "postfix", "limit", "truncated", "(Ljava/lang/Iterable;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "joinToString", "", "last", "lastIndexOf", "lastOrNull", "map", "mapIndexed", "mapIndexedNotNull", "mapIndexedNotNullTo", "mapIndexedTo", "mapNotNull", "mapNotNullTo", "mapTo", "max", "", "maxOrThrow", "(Ljava/lang/Iterable;)Ljava/lang/Comparable;", "maxBy", "maxByOrThrow", "maxByOrNull", "maxOf", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Comparable;", "maxOfOrNull", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Double;", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Float;", "maxOfWith", "comparator", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "(Ljava/lang/Iterable;Ljava/util/Comparator;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "maxOfWithOrNull", "maxOrNull", "(Ljava/lang/Iterable;)Ljava/lang/Double;", "(Ljava/lang/Iterable;)Ljava/lang/Float;", "maxWith", "maxWithOrThrow", "(Ljava/lang/Iterable;Ljava/util/Comparator;)Ljava/lang/Object;", "maxWithOrNull", "min", "minOrThrow", "minBy", "minByOrThrow", "minByOrNull", "minOf", "minOfOrNull", "minOfWith", "minOfWithOrNull", "minOrNull", "minWith", "minWithOrThrow", "minWithOrNull", "minus", "(Ljava/lang/Iterable;Ljava/lang/Object;)Ljava/util/List;", "elements", "", "(Ljava/lang/Iterable;[Ljava/lang/Object;)Ljava/util/List;", "minusElement", "none", "onEach", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Iterable;", "onEachIndexed", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function2;)Ljava/lang/Iterable;", "partition", "plus", "(Ljava/util/Collection;Ljava/lang/Object;)Ljava/util/List;", "(Ljava/util/Collection;[Ljava/lang/Object;)Ljava/util/List;", "plusElement", "random", "(Ljava/util/Collection;)Ljava/lang/Object;", "Lkotlin/random/Random;", "(Ljava/util/Collection;Lkotlin/random/Random;)Ljava/lang/Object;", "randomOrNull", "reduce", "S", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceIndexed", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "reduceIndexedOrNull", "reduceOrNull", "reduceRight", "(Ljava/util/List;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceRightIndexed", "(Ljava/util/List;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "reduceRightIndexedOrNull", "reduceRightOrNull", "requireNoNulls", "reversed", "runningFold", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "runningFoldIndexed", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/util/List;", "runningReduce", "runningReduceIndexed", "scan", "scanIndexed", "shuffle", "single", "singleOrNull", "slice", "indices", "Lkotlin/ranges/IntRange;", "sortBy", "sortByDescending", "sortDescending", "sorted", "sortedBy", "sortedByDescending", "sortedDescending", "sortedWith", "subtract", "sum", "sumOfByte", "sumOfDouble", "sumOfFloat", "sumOfInt", "sumOfLong", "sumOfShort", "sumBy", "sumByDouble", "sumOf", "Lkotlin/UInt;", "sumOfUInt", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)I", "Lkotlin/ULong;", "sumOfULong", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)J", "take", "takeLast", "takeLastWhile", "takeWhile", "toBooleanArray", "", "toByteArray", "", "toCharArray", "", "", "toCollection", "toDoubleArray", "", "toFloatArray", "", "toHashSet", "Ljava/util/HashSet;", "Lkotlin/collections/HashSet;", "toIntArray", "", "toList", "toLongArray", "", "toMutableList", "toMutableSet", "", "toSet", "toShortArray", "", "union", "windowed", "step", "partialWindows", "withIndex", "Lkotlin/collections/IndexedValue;", "zip", "a", "b", "(Ljava/lang/Iterable;[Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "zipWithNext", "kotlin-stdlib"}, k=5, mv={1, 7, 1}, xi=49, xs="kotlin/collections/CollectionsKt")
class CollectionsKt___CollectionsKt
  extends CollectionsKt___CollectionsJvmKt
{
  public static final <T> boolean all(Iterable<? extends T> paramIterable, Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "predicate");
    if (((paramIterable instanceof Collection)) && (((Collection)paramIterable).isEmpty())) {
      return true;
    }
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      if (!((Boolean)paramFunction1.invoke(paramIterable.next())).booleanValue()) {
        return false;
      }
    }
    return true;
  }
  
  public static final <T> boolean any(Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    if ((paramIterable instanceof Collection)) {
      return ((Collection)paramIterable).isEmpty() ^ true;
    }
    return paramIterable.iterator().hasNext();
  }
  
  public static final <T> boolean any(Iterable<? extends T> paramIterable, Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "predicate");
    if (((paramIterable instanceof Collection)) && (((Collection)paramIterable).isEmpty())) {
      return false;
    }
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      if (((Boolean)paramFunction1.invoke(paramIterable.next())).booleanValue()) {
        return true;
      }
    }
    return false;
  }
  
  private static final <T> Iterable<T> asIterable(Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    return paramIterable;
  }
  
  public static final <T> Sequence<T> asSequence(Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    (Sequence)new Sequence()
    {
      final Iterable $this_asSequence$inlined;
      
      public Iterator<T> iterator()
      {
        return this.$this_asSequence$inlined.iterator();
      }
    };
  }
  
  public static final <T, K, V> Map<K, V> associate(Iterable<? extends T> paramIterable, Function1<? super T, ? extends Pair<? extends K, ? extends V>> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "transform");
    Map localMap = (Map)new LinkedHashMap(RangesKt.coerceAtLeast(MapsKt.mapCapacity(CollectionsKt.collectionSizeOrDefault(paramIterable, 10)), 16));
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Pair localPair = (Pair)paramFunction1.invoke(paramIterable.next());
      localMap.put(localPair.getFirst(), localPair.getSecond());
    }
    return localMap;
  }
  
  public static final <T, K> Map<K, T> associateBy(Iterable<? extends T> paramIterable, Function1<? super T, ? extends K> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "keySelector");
    Map localMap = (Map)new LinkedHashMap(RangesKt.coerceAtLeast(MapsKt.mapCapacity(CollectionsKt.collectionSizeOrDefault(paramIterable, 10)), 16));
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      localMap.put(paramFunction1.invoke(localObject), localObject);
    }
    return localMap;
  }
  
  public static final <T, K, V> Map<K, V> associateBy(Iterable<? extends T> paramIterable, Function1<? super T, ? extends K> paramFunction1, Function1<? super T, ? extends V> paramFunction11)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "keySelector");
    Intrinsics.checkNotNullParameter(paramFunction11, "valueTransform");
    Map localMap = (Map)new LinkedHashMap(RangesKt.coerceAtLeast(MapsKt.mapCapacity(CollectionsKt.collectionSizeOrDefault(paramIterable, 10)), 16));
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      localMap.put(paramFunction1.invoke(localObject), paramFunction11.invoke(localObject));
    }
    return localMap;
  }
  
  public static final <T, K, M extends Map<? super K, ? super T>> M associateByTo(Iterable<? extends T> paramIterable, M paramM, Function1<? super T, ? extends K> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramM, "destination");
    Intrinsics.checkNotNullParameter(paramFunction1, "keySelector");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      paramM.put(paramFunction1.invoke(localObject), localObject);
    }
    return paramM;
  }
  
  public static final <T, K, V, M extends Map<? super K, ? super V>> M associateByTo(Iterable<? extends T> paramIterable, M paramM, Function1<? super T, ? extends K> paramFunction1, Function1<? super T, ? extends V> paramFunction11)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramM, "destination");
    Intrinsics.checkNotNullParameter(paramFunction1, "keySelector");
    Intrinsics.checkNotNullParameter(paramFunction11, "valueTransform");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      paramM.put(paramFunction1.invoke(localObject), paramFunction11.invoke(localObject));
    }
    return paramM;
  }
  
  public static final <T, K, V, M extends Map<? super K, ? super V>> M associateTo(Iterable<? extends T> paramIterable, M paramM, Function1<? super T, ? extends Pair<? extends K, ? extends V>> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramM, "destination");
    Intrinsics.checkNotNullParameter(paramFunction1, "transform");
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext())
    {
      paramIterable = (Pair)paramFunction1.invoke(localIterator.next());
      paramM.put(paramIterable.getFirst(), paramIterable.getSecond());
    }
    return paramM;
  }
  
  public static final <K, V> Map<K, V> associateWith(Iterable<? extends K> paramIterable, Function1<? super K, ? extends V> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "valueSelector");
    LinkedHashMap localLinkedHashMap = new LinkedHashMap(RangesKt.coerceAtLeast(MapsKt.mapCapacity(CollectionsKt.collectionSizeOrDefault(paramIterable, 10)), 16));
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      ((Map)localLinkedHashMap).put(localObject, paramFunction1.invoke(localObject));
    }
    return (Map)localLinkedHashMap;
  }
  
  public static final <K, V, M extends Map<? super K, ? super V>> M associateWithTo(Iterable<? extends K> paramIterable, M paramM, Function1<? super K, ? extends V> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramM, "destination");
    Intrinsics.checkNotNullParameter(paramFunction1, "valueSelector");
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext())
    {
      paramIterable = localIterator.next();
      paramM.put(paramIterable, paramFunction1.invoke(paramIterable));
    }
    return paramM;
  }
  
  public static final double averageOfByte(Iterable<Byte> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    double d1 = 0.0D;
    int i = 0;
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      double d2 = d1 + ((Number)paramIterable.next()).byteValue();
      int j = i + 1;
      d1 = d2;
      i = j;
      if (j < 0)
      {
        CollectionsKt.throwCountOverflow();
        d1 = d2;
        i = j;
      }
    }
    if (i == 0) {
      d1 = NaN.0D;
    } else {
      d1 /= i;
    }
    return d1;
  }
  
  public static final double averageOfDouble(Iterable<Double> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    double d1 = 0.0D;
    int i = 0;
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      double d2 = d1 + ((Number)paramIterable.next()).doubleValue();
      int j = i + 1;
      d1 = d2;
      i = j;
      if (j < 0)
      {
        CollectionsKt.throwCountOverflow();
        d1 = d2;
        i = j;
      }
    }
    if (i == 0) {
      d1 = NaN.0D;
    } else {
      d1 /= i;
    }
    return d1;
  }
  
  public static final double averageOfFloat(Iterable<Float> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    double d1 = 0.0D;
    int i = 0;
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      double d2 = d1 + ((Number)paramIterable.next()).floatValue();
      int j = i + 1;
      d1 = d2;
      i = j;
      if (j < 0)
      {
        CollectionsKt.throwCountOverflow();
        d1 = d2;
        i = j;
      }
    }
    if (i == 0) {
      d1 = NaN.0D;
    } else {
      d1 /= i;
    }
    return d1;
  }
  
  public static final double averageOfInt(Iterable<Integer> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    double d1 = 0.0D;
    int i = 0;
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      double d2 = d1 + ((Number)paramIterable.next()).intValue();
      int j = i + 1;
      d1 = d2;
      i = j;
      if (j < 0)
      {
        CollectionsKt.throwCountOverflow();
        d1 = d2;
        i = j;
      }
    }
    if (i == 0) {
      d1 = NaN.0D;
    } else {
      d1 /= i;
    }
    return d1;
  }
  
  public static final double averageOfLong(Iterable<Long> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    double d1 = 0.0D;
    int i = 0;
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      double d2 = d1 + ((Number)paramIterable.next()).longValue();
      int j = i + 1;
      d1 = d2;
      i = j;
      if (j < 0)
      {
        CollectionsKt.throwCountOverflow();
        d1 = d2;
        i = j;
      }
    }
    if (i == 0) {
      d1 = NaN.0D;
    } else {
      d1 /= i;
    }
    return d1;
  }
  
  public static final double averageOfShort(Iterable<Short> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    double d1 = 0.0D;
    int i = 0;
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      double d2 = d1 + ((Number)paramIterable.next()).shortValue();
      int j = i + 1;
      d1 = d2;
      i = j;
      if (j < 0)
      {
        CollectionsKt.throwCountOverflow();
        d1 = d2;
        i = j;
      }
    }
    if (i == 0) {
      d1 = NaN.0D;
    } else {
      d1 /= i;
    }
    return d1;
  }
  
  public static final <T> List<List<T>> chunked(Iterable<? extends T> paramIterable, int paramInt)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    return CollectionsKt.windowed(paramIterable, paramInt, paramInt, true);
  }
  
  public static final <T, R> List<R> chunked(Iterable<? extends T> paramIterable, int paramInt, Function1<? super List<? extends T>, ? extends R> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "transform");
    return CollectionsKt.windowed(paramIterable, paramInt, paramInt, true, paramFunction1);
  }
  
  private static final <T> T component1(List<? extends T> paramList)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    return (T)paramList.get(0);
  }
  
  private static final <T> T component2(List<? extends T> paramList)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    return (T)paramList.get(1);
  }
  
  private static final <T> T component3(List<? extends T> paramList)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    return (T)paramList.get(2);
  }
  
  private static final <T> T component4(List<? extends T> paramList)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    return (T)paramList.get(3);
  }
  
  private static final <T> T component5(List<? extends T> paramList)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    return (T)paramList.get(4);
  }
  
  public static final <T> boolean contains(Iterable<? extends T> paramIterable, T paramT)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    if ((paramIterable instanceof Collection)) {
      return ((Collection)paramIterable).contains(paramT);
    }
    boolean bool;
    if (CollectionsKt.indexOf(paramIterable, paramT) >= 0) {
      bool = true;
    } else {
      bool = false;
    }
    return bool;
  }
  
  public static final <T> int count(Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    if ((paramIterable instanceof Collection)) {
      return ((Collection)paramIterable).size();
    }
    int i = 0;
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      paramIterable.next();
      int j = i + 1;
      i = j;
      if (j < 0)
      {
        CollectionsKt.throwCountOverflow();
        i = j;
      }
    }
    return i;
  }
  
  public static final <T> int count(Iterable<? extends T> paramIterable, Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "predicate");
    if (((paramIterable instanceof Collection)) && (((Collection)paramIterable).isEmpty())) {
      return 0;
    }
    int i = 0;
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      if (((Boolean)paramFunction1.invoke(paramIterable.next())).booleanValue())
      {
        int j = i + 1;
        i = j;
        if (j < 0)
        {
          CollectionsKt.throwCountOverflow();
          i = j;
        }
      }
    }
    return i;
  }
  
  private static final <T> int count(Collection<? extends T> paramCollection)
  {
    Intrinsics.checkNotNullParameter(paramCollection, "<this>");
    return paramCollection.size();
  }
  
  public static final <T> List<T> distinct(Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    return CollectionsKt.toList((Iterable)CollectionsKt.toMutableSet(paramIterable));
  }
  
  public static final <T, K> List<T> distinctBy(Iterable<? extends T> paramIterable, Function1<? super T, ? extends K> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    HashSet localHashSet = new HashSet();
    ArrayList localArrayList = new ArrayList();
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (localHashSet.add(paramFunction1.invoke(localObject))) {
        localArrayList.add(localObject);
      }
    }
    return (List)localArrayList;
  }
  
  public static final <T> List<T> drop(Iterable<? extends T> paramIterable, int paramInt)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    int i;
    if (paramInt >= 0) {
      i = 1;
    } else {
      i = 0;
    }
    if (i != 0)
    {
      if (paramInt == 0) {
        return CollectionsKt.toList(paramIterable);
      }
      Object localObject1;
      if ((paramIterable instanceof Collection))
      {
        i = ((Collection)paramIterable).size() - paramInt;
        if (i <= 0) {
          return CollectionsKt.emptyList();
        }
        if (i == 1) {
          return CollectionsKt.listOf(CollectionsKt.last(paramIterable));
        }
        localObject2 = new ArrayList(i);
        localObject1 = localObject2;
        if ((paramIterable instanceof List))
        {
          if ((paramIterable instanceof RandomAccess))
          {
            i = ((Collection)paramIterable).size();
            while (paramInt < i)
            {
              ((ArrayList)localObject2).add(((List)paramIterable).get(paramInt));
              paramInt++;
            }
          }
          paramIterable = (Iterator)((List)paramIterable).listIterator(paramInt);
          while (paramIterable.hasNext()) {
            ((ArrayList)localObject2).add(paramIterable.next());
          }
          return (List)localObject2;
        }
      }
      else
      {
        localObject1 = new ArrayList();
      }
      i = 0;
      Object localObject2 = paramIterable.iterator();
      while (((Iterator)localObject2).hasNext())
      {
        paramIterable = ((Iterator)localObject2).next();
        if (i >= paramInt) {
          ((ArrayList)localObject1).add(paramIterable);
        } else {
          i++;
        }
      }
      return CollectionsKt.optimizeReadOnlyList((List)localObject1);
    }
    throw new IllegalArgumentException(("Requested element count " + paramInt + " is less than zero.").toString());
  }
  
  public static final <T> List<T> dropLast(List<? extends T> paramList, int paramInt)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    int i;
    if (paramInt >= 0) {
      i = 1;
    } else {
      i = 0;
    }
    if (i != 0) {
      return CollectionsKt.take((Iterable)paramList, RangesKt.coerceAtLeast(paramList.size() - paramInt, 0));
    }
    throw new IllegalArgumentException(("Requested element count " + paramInt + " is less than zero.").toString());
  }
  
  public static final <T> List<T> dropLastWhile(List<? extends T> paramList, Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "predicate");
    if (!paramList.isEmpty())
    {
      ListIterator localListIterator = paramList.listIterator(paramList.size());
      while (localListIterator.hasPrevious()) {
        if (!((Boolean)paramFunction1.invoke(localListIterator.previous())).booleanValue()) {
          return CollectionsKt.take((Iterable)paramList, localListIterator.nextIndex() + 1);
        }
      }
    }
    return CollectionsKt.emptyList();
  }
  
  public static final <T> List<T> dropWhile(Iterable<? extends T> paramIterable, Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "predicate");
    int i = 0;
    ArrayList localArrayList = new ArrayList();
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext())
    {
      paramIterable = localIterator.next();
      if (i != 0)
      {
        localArrayList.add(paramIterable);
      }
      else if (!((Boolean)paramFunction1.invoke(paramIterable)).booleanValue())
      {
        localArrayList.add(paramIterable);
        i = 1;
      }
    }
    return (List)localArrayList;
  }
  
  public static final <T> T elementAt(Iterable<? extends T> paramIterable, int paramInt)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    if ((paramIterable instanceof List)) {
      return (T)((List)paramIterable).get(paramInt);
    }
    (T)CollectionsKt.elementAtOrElse(paramIterable, paramInt, (Function1)new Lambda(paramInt)
    {
      final int $index;
      
      public final T invoke(int paramAnonymousInt)
      {
        throw new IndexOutOfBoundsException("Collection doesn't contain element at index " + this.$index + '.');
      }
    });
  }
  
  private static final <T> T elementAt(List<? extends T> paramList, int paramInt)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    return (T)paramList.get(paramInt);
  }
  
  public static final <T> T elementAtOrElse(Iterable<? extends T> paramIterable, int paramInt, Function1<? super Integer, ? extends T> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "defaultValue");
    if ((paramIterable instanceof List))
    {
      paramIterable = (List)paramIterable;
      if ((paramInt >= 0) && (paramInt <= CollectionsKt.getLastIndex(paramIterable))) {
        paramIterable = paramIterable.get(paramInt);
      } else {
        paramIterable = paramFunction1.invoke(Integer.valueOf(paramInt));
      }
      return paramIterable;
    }
    if (paramInt < 0) {
      return (T)paramFunction1.invoke(Integer.valueOf(paramInt));
    }
    paramIterable = paramIterable.iterator();
    for (int i = 0; paramIterable.hasNext(); i++)
    {
      Object localObject = paramIterable.next();
      if (paramInt == i) {
        return (T)localObject;
      }
    }
    return (T)paramFunction1.invoke(Integer.valueOf(paramInt));
  }
  
  private static final <T> T elementAtOrElse(List<? extends T> paramList, int paramInt, Function1<? super Integer, ? extends T> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "defaultValue");
    if ((paramInt >= 0) && (paramInt <= CollectionsKt.getLastIndex(paramList))) {
      paramList = paramList.get(paramInt);
    } else {
      paramList = paramFunction1.invoke(Integer.valueOf(paramInt));
    }
    return paramList;
  }
  
  public static final <T> T elementAtOrNull(Iterable<? extends T> paramIterable, int paramInt)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    if ((paramIterable instanceof List)) {
      return (T)CollectionsKt.getOrNull((List)paramIterable, paramInt);
    }
    if (paramInt < 0) {
      return null;
    }
    paramIterable = paramIterable.iterator();
    for (int i = 0; paramIterable.hasNext(); i++)
    {
      Object localObject = paramIterable.next();
      if (paramInt == i) {
        return (T)localObject;
      }
    }
    return null;
  }
  
  private static final <T> T elementAtOrNull(List<? extends T> paramList, int paramInt)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    return (T)CollectionsKt.getOrNull(paramList, paramInt);
  }
  
  public static final <T> List<T> filter(Iterable<? extends T> paramIterable, Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "predicate");
    Collection localCollection = (Collection)new ArrayList();
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        localCollection.add(localObject);
      }
    }
    return (List)localCollection;
  }
  
  public static final <T> List<T> filterIndexed(Iterable<? extends T> paramIterable, Function2<? super Integer, ? super T, Boolean> paramFunction2)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction2, "predicate");
    Collection localCollection = (Collection)new ArrayList();
    int i = 0;
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext())
    {
      paramIterable = localIterator.next();
      if (i < 0) {
        CollectionsKt.throwIndexOverflow();
      }
      if (((Boolean)paramFunction2.invoke(Integer.valueOf(i), paramIterable)).booleanValue()) {
        localCollection.add(paramIterable);
      }
      i++;
    }
    return (List)localCollection;
  }
  
  public static final <T, C extends Collection<? super T>> C filterIndexedTo(Iterable<? extends T> paramIterable, C paramC, Function2<? super Integer, ? super T, Boolean> paramFunction2)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramC, "destination");
    Intrinsics.checkNotNullParameter(paramFunction2, "predicate");
    int i = 0;
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (i < 0) {
        CollectionsKt.throwIndexOverflow();
      }
      if (((Boolean)paramFunction2.invoke(Integer.valueOf(i), localObject)).booleanValue()) {
        paramC.add(localObject);
      }
      i++;
    }
    return paramC;
  }
  
  public static final <T> List<T> filterNot(Iterable<? extends T> paramIterable, Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "predicate");
    Collection localCollection = (Collection)new ArrayList();
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (!((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        localCollection.add(localObject);
      }
    }
    return (List)localCollection;
  }
  
  public static final <T> List<T> filterNotNull(Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    return (List)CollectionsKt.filterNotNullTo(paramIterable, (Collection)new ArrayList());
  }
  
  public static final <C extends Collection<? super T>, T> C filterNotNullTo(Iterable<? extends T> paramIterable, C paramC)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramC, "destination");
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext())
    {
      paramIterable = localIterator.next();
      if (paramIterable != null) {
        paramC.add(paramIterable);
      }
    }
    return paramC;
  }
  
  public static final <T, C extends Collection<? super T>> C filterNotTo(Iterable<? extends T> paramIterable, C paramC, Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramC, "destination");
    Intrinsics.checkNotNullParameter(paramFunction1, "predicate");
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext())
    {
      paramIterable = localIterator.next();
      if (!((Boolean)paramFunction1.invoke(paramIterable)).booleanValue()) {
        paramC.add(paramIterable);
      }
    }
    return paramC;
  }
  
  public static final <T, C extends Collection<? super T>> C filterTo(Iterable<? extends T> paramIterable, C paramC, Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramC, "destination");
    Intrinsics.checkNotNullParameter(paramFunction1, "predicate");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        paramC.add(localObject);
      }
    }
    return paramC;
  }
  
  private static final <T> T find(Iterable<? extends T> paramIterable, Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "predicate");
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext())
    {
      paramIterable = localIterator.next();
      if (((Boolean)paramFunction1.invoke(paramIterable)).booleanValue()) {
        return paramIterable;
      }
    }
    paramIterable = null;
    return paramIterable;
  }
  
  private static final <T> T findLast(Iterable<? extends T> paramIterable, Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "predicate");
    Object localObject = null;
    Iterator localIterator = paramIterable.iterator();
    paramIterable = (Iterable<? extends T>)localObject;
    while (localIterator.hasNext())
    {
      localObject = localIterator.next();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        paramIterable = (Iterable<? extends T>)localObject;
      }
    }
    return paramIterable;
  }
  
  private static final <T> T findLast(List<? extends T> paramList, Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "predicate");
    ListIterator localListIterator = paramList.listIterator(paramList.size());
    while (localListIterator.hasPrevious())
    {
      paramList = localListIterator.previous();
      if (((Boolean)paramFunction1.invoke(paramList)).booleanValue()) {
        return paramList;
      }
    }
    paramList = null;
    return paramList;
  }
  
  public static final <T> T first(Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    if ((paramIterable instanceof List)) {
      return (T)CollectionsKt.first((List)paramIterable);
    }
    paramIterable = paramIterable.iterator();
    if (paramIterable.hasNext()) {
      return (T)paramIterable.next();
    }
    throw new NoSuchElementException("Collection is empty.");
  }
  
  public static final <T> T first(Iterable<? extends T> paramIterable, Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "predicate");
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext())
    {
      paramIterable = localIterator.next();
      if (((Boolean)paramFunction1.invoke(paramIterable)).booleanValue()) {
        return paramIterable;
      }
    }
    throw new NoSuchElementException("Collection contains no element matching the predicate.");
  }
  
  public static final <T> T first(List<? extends T> paramList)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    if (!paramList.isEmpty()) {
      return (T)paramList.get(0);
    }
    throw new NoSuchElementException("List is empty.");
  }
  
  private static final <T, R> R firstNotNullOf(Iterable<? extends T> paramIterable, Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "transform");
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext())
    {
      Object localObject = paramFunction1.invoke(localIterator.next());
      paramIterable = (Iterable<? extends T>)localObject;
      if (localObject != null) {
        break label54;
      }
    }
    paramIterable = null;
    label54:
    if (paramIterable != null) {
      return paramIterable;
    }
    throw new NoSuchElementException("No element of the collection was transformed to a non-null value.");
  }
  
  private static final <T, R> R firstNotNullOfOrNull(Iterable<? extends T> paramIterable, Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "transform");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramFunction1.invoke(paramIterable.next());
      if (localObject != null) {
        return (R)localObject;
      }
    }
    return null;
  }
  
  public static final <T> T firstOrNull(Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    if ((paramIterable instanceof List))
    {
      if (((List)paramIterable).isEmpty()) {
        return null;
      }
      return (T)((List)paramIterable).get(0);
    }
    paramIterable = paramIterable.iterator();
    if (!paramIterable.hasNext()) {
      return null;
    }
    return (T)paramIterable.next();
  }
  
  public static final <T> T firstOrNull(Iterable<? extends T> paramIterable, Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "predicate");
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext())
    {
      paramIterable = localIterator.next();
      if (((Boolean)paramFunction1.invoke(paramIterable)).booleanValue()) {
        return paramIterable;
      }
    }
    return null;
  }
  
  public static final <T> T firstOrNull(List<? extends T> paramList)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    if (paramList.isEmpty()) {
      paramList = null;
    } else {
      paramList = paramList.get(0);
    }
    return paramList;
  }
  
  public static final <T, R> List<R> flatMap(Iterable<? extends T> paramIterable, Function1<? super T, ? extends Iterable<? extends R>> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "transform");
    Collection localCollection = (Collection)new ArrayList();
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      CollectionsKt.addAll(localCollection, (Iterable)paramFunction1.invoke(paramIterable.next()));
    }
    return (List)localCollection;
  }
  
  private static final <T, R> List<R> flatMapIndexedIterable(Iterable<? extends T> paramIterable, Function2<? super Integer, ? super T, ? extends Iterable<? extends R>> paramFunction2)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction2, "transform");
    Collection localCollection = (Collection)new ArrayList();
    Iterator localIterator = paramIterable.iterator();
    for (int i = 0; localIterator.hasNext(); i++)
    {
      paramIterable = localIterator.next();
      if (i < 0) {
        CollectionsKt.throwIndexOverflow();
      }
      CollectionsKt.addAll(localCollection, (Iterable)paramFunction2.invoke(Integer.valueOf(i), paramIterable));
    }
    return (List)localCollection;
  }
  
  private static final <T, R, C extends Collection<? super R>> C flatMapIndexedIterableTo(Iterable<? extends T> paramIterable, C paramC, Function2<? super Integer, ? super T, ? extends Iterable<? extends R>> paramFunction2)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramC, "destination");
    Intrinsics.checkNotNullParameter(paramFunction2, "transform");
    int i = 0;
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext())
    {
      paramIterable = localIterator.next();
      if (i < 0) {
        CollectionsKt.throwIndexOverflow();
      }
      CollectionsKt.addAll(paramC, (Iterable)paramFunction2.invoke(Integer.valueOf(i), paramIterable));
      i++;
    }
    return paramC;
  }
  
  private static final <T, R> List<R> flatMapIndexedSequence(Iterable<? extends T> paramIterable, Function2<? super Integer, ? super T, ? extends Sequence<? extends R>> paramFunction2)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction2, "transform");
    Collection localCollection = (Collection)new ArrayList();
    Iterator localIterator = paramIterable.iterator();
    for (int i = 0; localIterator.hasNext(); i++)
    {
      paramIterable = localIterator.next();
      if (i < 0) {
        CollectionsKt.throwIndexOverflow();
      }
      CollectionsKt.addAll(localCollection, (Sequence)paramFunction2.invoke(Integer.valueOf(i), paramIterable));
    }
    return (List)localCollection;
  }
  
  private static final <T, R, C extends Collection<? super R>> C flatMapIndexedSequenceTo(Iterable<? extends T> paramIterable, C paramC, Function2<? super Integer, ? super T, ? extends Sequence<? extends R>> paramFunction2)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramC, "destination");
    Intrinsics.checkNotNullParameter(paramFunction2, "transform");
    int i = 0;
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext())
    {
      paramIterable = localIterator.next();
      if (i < 0) {
        CollectionsKt.throwIndexOverflow();
      }
      CollectionsKt.addAll(paramC, (Sequence)paramFunction2.invoke(Integer.valueOf(i), paramIterable));
      i++;
    }
    return paramC;
  }
  
  public static final <T, R> List<R> flatMapSequence(Iterable<? extends T> paramIterable, Function1<? super T, ? extends Sequence<? extends R>> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "transform");
    Collection localCollection = (Collection)new ArrayList();
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      CollectionsKt.addAll(localCollection, (Sequence)paramFunction1.invoke(paramIterable.next()));
    }
    return (List)localCollection;
  }
  
  public static final <T, R, C extends Collection<? super R>> C flatMapSequenceTo(Iterable<? extends T> paramIterable, C paramC, Function1<? super T, ? extends Sequence<? extends R>> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramC, "destination");
    Intrinsics.checkNotNullParameter(paramFunction1, "transform");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      CollectionsKt.addAll(paramC, (Sequence)paramFunction1.invoke(paramIterable.next()));
    }
    return paramC;
  }
  
  public static final <T, R, C extends Collection<? super R>> C flatMapTo(Iterable<? extends T> paramIterable, C paramC, Function1<? super T, ? extends Iterable<? extends R>> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramC, "destination");
    Intrinsics.checkNotNullParameter(paramFunction1, "transform");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      CollectionsKt.addAll(paramC, (Iterable)paramFunction1.invoke(paramIterable.next()));
    }
    return paramC;
  }
  
  public static final <T, R> R fold(Iterable<? extends T> paramIterable, R paramR, Function2<? super R, ? super T, ? extends R> paramFunction2)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction2, "operation");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      paramR = paramFunction2.invoke(paramR, paramIterable.next());
    }
    return paramR;
  }
  
  public static final <T, R> R foldIndexed(Iterable<? extends T> paramIterable, R paramR, Function3<? super Integer, ? super R, ? super T, ? extends R> paramFunction3)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction3, "operation");
    int i = 0;
    Iterator localIterator = paramIterable.iterator();
    paramIterable = paramR;
    while (localIterator.hasNext())
    {
      paramR = localIterator.next();
      if (i < 0) {
        CollectionsKt.throwIndexOverflow();
      }
      paramIterable = paramFunction3.invoke(Integer.valueOf(i), paramIterable, paramR);
      i++;
    }
    return paramIterable;
  }
  
  public static final <T, R> R foldRight(List<? extends T> paramList, R paramR, Function2<? super T, ? super R, ? extends R> paramFunction2)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction2, "operation");
    R ? = paramR;
    if (!paramList.isEmpty())
    {
      paramList = paramList.listIterator(paramList.size());
      for (;;)
      {
        ? = paramR;
        if (!paramList.hasPrevious()) {
          break;
        }
        paramR = paramFunction2.invoke(paramList.previous(), paramR);
      }
    }
    return ?;
  }
  
  public static final <T, R> R foldRightIndexed(List<? extends T> paramList, R paramR, Function3<? super Integer, ? super T, ? super R, ? extends R> paramFunction3)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction3, "operation");
    R ? = paramR;
    if (!paramList.isEmpty())
    {
      paramList = paramList.listIterator(paramList.size());
      for (;;)
      {
        ? = paramR;
        if (!paramList.hasPrevious()) {
          break;
        }
        paramR = paramFunction3.invoke(Integer.valueOf(paramList.previousIndex()), paramList.previous(), paramR);
      }
    }
    return ?;
  }
  
  public static final <T> void forEach(Iterable<? extends T> paramIterable, Function1<? super T, Unit> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "action");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      paramFunction1.invoke(paramIterable.next());
    }
  }
  
  public static final <T> void forEachIndexed(Iterable<? extends T> paramIterable, Function2<? super Integer, ? super T, Unit> paramFunction2)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction2, "action");
    int i = 0;
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (i < 0) {
        CollectionsKt.throwIndexOverflow();
      }
      paramFunction2.invoke(Integer.valueOf(i), localObject);
      i++;
    }
  }
  
  private static final <T> T getOrElse(List<? extends T> paramList, int paramInt, Function1<? super Integer, ? extends T> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "defaultValue");
    if ((paramInt >= 0) && (paramInt <= CollectionsKt.getLastIndex(paramList))) {
      paramList = paramList.get(paramInt);
    } else {
      paramList = paramFunction1.invoke(Integer.valueOf(paramInt));
    }
    return paramList;
  }
  
  public static final <T> T getOrNull(List<? extends T> paramList, int paramInt)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    if ((paramInt >= 0) && (paramInt <= CollectionsKt.getLastIndex(paramList))) {
      paramList = paramList.get(paramInt);
    } else {
      paramList = null;
    }
    return paramList;
  }
  
  public static final <T, K> Map<K, List<T>> groupBy(Iterable<? extends T> paramIterable, Function1<? super T, ? extends K> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "keySelector");
    Map localMap = (Map)new LinkedHashMap();
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext())
    {
      Object localObject1 = localIterator.next();
      Object localObject2 = paramFunction1.invoke(localObject1);
      paramIterable = localMap.get(localObject2);
      if (paramIterable == null)
      {
        paramIterable = (List)new ArrayList();
        localMap.put(localObject2, paramIterable);
      }
      ((List)paramIterable).add(localObject1);
    }
    return localMap;
  }
  
  public static final <T, K, V> Map<K, List<V>> groupBy(Iterable<? extends T> paramIterable, Function1<? super T, ? extends K> paramFunction1, Function1<? super T, ? extends V> paramFunction11)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "keySelector");
    Intrinsics.checkNotNullParameter(paramFunction11, "valueTransform");
    Map localMap = (Map)new LinkedHashMap();
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext())
    {
      Object localObject1 = localIterator.next();
      Object localObject2 = paramFunction1.invoke(localObject1);
      paramIterable = localMap.get(localObject2);
      if (paramIterable == null)
      {
        paramIterable = (List)new ArrayList();
        localMap.put(localObject2, paramIterable);
      }
      ((List)paramIterable).add(paramFunction11.invoke(localObject1));
    }
    return localMap;
  }
  
  public static final <T, K, M extends Map<? super K, List<T>>> M groupByTo(Iterable<? extends T> paramIterable, M paramM, Function1<? super T, ? extends K> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramM, "destination");
    Intrinsics.checkNotNullParameter(paramFunction1, "keySelector");
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext())
    {
      Object localObject1 = localIterator.next();
      Object localObject2 = paramFunction1.invoke(localObject1);
      paramIterable = paramM.get(localObject2);
      if (paramIterable == null)
      {
        paramIterable = (List)new ArrayList();
        paramM.put(localObject2, paramIterable);
      }
      ((List)paramIterable).add(localObject1);
    }
    return paramM;
  }
  
  public static final <T, K, V, M extends Map<? super K, List<V>>> M groupByTo(Iterable<? extends T> paramIterable, M paramM, Function1<? super T, ? extends K> paramFunction1, Function1<? super T, ? extends V> paramFunction11)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramM, "destination");
    Intrinsics.checkNotNullParameter(paramFunction1, "keySelector");
    Intrinsics.checkNotNullParameter(paramFunction11, "valueTransform");
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext())
    {
      Object localObject1 = localIterator.next();
      Object localObject2 = paramFunction1.invoke(localObject1);
      paramIterable = paramM.get(localObject2);
      if (paramIterable == null)
      {
        paramIterable = (List)new ArrayList();
        paramM.put(localObject2, paramIterable);
      }
      ((List)paramIterable).add(paramFunction11.invoke(localObject1));
    }
    return paramM;
  }
  
  public static final <T, K> Grouping<T, K> groupingBy(Iterable<? extends T> paramIterable, final Function1<? super T, ? extends K> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "keySelector");
    (Grouping)new Grouping()
    {
      final Iterable<T> $this_groupingBy;
      
      public K keyOf(T paramAnonymousT)
      {
        return (K)paramFunction1.invoke(paramAnonymousT);
      }
      
      public Iterator<T> sourceIterator()
      {
        return this.$this_groupingBy.iterator();
      }
    };
  }
  
  public static final <T> int indexOf(Iterable<? extends T> paramIterable, T paramT)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    if ((paramIterable instanceof List)) {
      return ((List)paramIterable).indexOf(paramT);
    }
    int i = 0;
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext())
    {
      paramIterable = localIterator.next();
      if (i < 0) {
        CollectionsKt.throwIndexOverflow();
      }
      if (Intrinsics.areEqual(paramT, paramIterable)) {
        return i;
      }
      i++;
    }
    return -1;
  }
  
  public static final <T> int indexOf(List<? extends T> paramList, T paramT)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    return paramList.indexOf(paramT);
  }
  
  public static final <T> int indexOfFirst(Iterable<? extends T> paramIterable, Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "predicate");
    int i = 0;
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (i < 0) {
        CollectionsKt.throwIndexOverflow();
      }
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        return i;
      }
      i++;
    }
    return -1;
  }
  
  public static final <T> int indexOfFirst(List<? extends T> paramList, Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "predicate");
    int i = 0;
    paramList = paramList.iterator();
    while (paramList.hasNext())
    {
      if (((Boolean)paramFunction1.invoke(paramList.next())).booleanValue()) {
        return i;
      }
      i++;
    }
    return -1;
  }
  
  public static final <T> int indexOfLast(Iterable<? extends T> paramIterable, Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "predicate");
    int j = -1;
    int i = 0;
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext())
    {
      paramIterable = localIterator.next();
      if (i < 0) {
        CollectionsKt.throwIndexOverflow();
      }
      if (((Boolean)paramFunction1.invoke(paramIterable)).booleanValue()) {
        j = i;
      }
      i++;
    }
    return j;
  }
  
  public static final <T> int indexOfLast(List<? extends T> paramList, Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "predicate");
    paramList = paramList.listIterator(paramList.size());
    while (paramList.hasPrevious()) {
      if (((Boolean)paramFunction1.invoke(paramList.previous())).booleanValue()) {
        return paramList.nextIndex();
      }
    }
    return -1;
  }
  
  public static final <T> Set<T> intersect(Iterable<? extends T> paramIterable1, Iterable<? extends T> paramIterable2)
  {
    Intrinsics.checkNotNullParameter(paramIterable1, "<this>");
    Intrinsics.checkNotNullParameter(paramIterable2, "other");
    paramIterable1 = CollectionsKt.toMutableSet(paramIterable1);
    CollectionsKt.retainAll((Collection)paramIterable1, paramIterable2);
    return paramIterable1;
  }
  
  public static final <T, A extends Appendable> A joinTo(Iterable<? extends T> paramIterable, A paramA, CharSequence paramCharSequence1, CharSequence paramCharSequence2, CharSequence paramCharSequence3, int paramInt, CharSequence paramCharSequence4, Function1<? super T, ? extends CharSequence> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramA, "buffer");
    Intrinsics.checkNotNullParameter(paramCharSequence1, "separator");
    Intrinsics.checkNotNullParameter(paramCharSequence2, "prefix");
    Intrinsics.checkNotNullParameter(paramCharSequence3, "postfix");
    Intrinsics.checkNotNullParameter(paramCharSequence4, "truncated");
    paramA.append(paramCharSequence2);
    int i = 0;
    paramIterable = paramIterable.iterator();
    int j;
    for (;;)
    {
      j = i;
      if (!paramIterable.hasNext()) {
        break;
      }
      paramCharSequence2 = paramIterable.next();
      i++;
      if (i > 1) {
        paramA.append(paramCharSequence1);
      }
      if ((paramInt >= 0) && (i > paramInt))
      {
        j = i;
        break;
      }
      StringsKt.appendElement(paramA, paramCharSequence2, paramFunction1);
    }
    if ((paramInt >= 0) && (j > paramInt)) {
      paramA.append(paramCharSequence4);
    }
    paramA.append(paramCharSequence3);
    return paramA;
  }
  
  public static final <T> String joinToString(Iterable<? extends T> paramIterable, CharSequence paramCharSequence1, CharSequence paramCharSequence2, CharSequence paramCharSequence3, int paramInt, CharSequence paramCharSequence4, Function1<? super T, ? extends CharSequence> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramCharSequence1, "separator");
    Intrinsics.checkNotNullParameter(paramCharSequence2, "prefix");
    Intrinsics.checkNotNullParameter(paramCharSequence3, "postfix");
    Intrinsics.checkNotNullParameter(paramCharSequence4, "truncated");
    paramIterable = ((StringBuilder)CollectionsKt.joinTo(paramIterable, (Appendable)new StringBuilder(), paramCharSequence1, paramCharSequence2, paramCharSequence3, paramInt, paramCharSequence4, paramFunction1)).toString();
    Intrinsics.checkNotNullExpressionValue(paramIterable, "joinTo(StringBuilder(), …ed, transform).toString()");
    return paramIterable;
  }
  
  public static final <T> T last(Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    if ((paramIterable instanceof List)) {
      return (T)CollectionsKt.last((List)paramIterable);
    }
    Iterator localIterator = paramIterable.iterator();
    if (localIterator.hasNext())
    {
      for (paramIterable = localIterator.next(); localIterator.hasNext(); paramIterable = localIterator.next()) {}
      return paramIterable;
    }
    throw new NoSuchElementException("Collection is empty.");
  }
  
  public static final <T> T last(Iterable<? extends T> paramIterable, Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "predicate");
    Object localObject = null;
    int i = 0;
    Iterator localIterator = paramIterable.iterator();
    paramIterable = (Iterable<? extends T>)localObject;
    while (localIterator.hasNext())
    {
      localObject = localIterator.next();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue())
      {
        paramIterable = (Iterable<? extends T>)localObject;
        i = 1;
      }
    }
    if (i != 0) {
      return paramIterable;
    }
    throw new NoSuchElementException("Collection contains no element matching the predicate.");
  }
  
  public static final <T> T last(List<? extends T> paramList)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    if (!paramList.isEmpty()) {
      return (T)paramList.get(CollectionsKt.getLastIndex(paramList));
    }
    throw new NoSuchElementException("List is empty.");
  }
  
  public static final <T> T last(List<? extends T> paramList, Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "predicate");
    paramList = paramList.listIterator(paramList.size());
    while (paramList.hasPrevious())
    {
      Object localObject = paramList.previous();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        return (T)localObject;
      }
    }
    throw new NoSuchElementException("List contains no element matching the predicate.");
  }
  
  public static final <T> int lastIndexOf(Iterable<? extends T> paramIterable, T paramT)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    if ((paramIterable instanceof List)) {
      return ((List)paramIterable).lastIndexOf(paramT);
    }
    int j = -1;
    int i = 0;
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext())
    {
      paramIterable = localIterator.next();
      if (i < 0) {
        CollectionsKt.throwIndexOverflow();
      }
      if (Intrinsics.areEqual(paramT, paramIterable)) {
        j = i;
      }
      i++;
    }
    return j;
  }
  
  public static final <T> int lastIndexOf(List<? extends T> paramList, T paramT)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    return paramList.lastIndexOf(paramT);
  }
  
  public static final <T> T lastOrNull(Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    boolean bool = paramIterable instanceof List;
    Iterator localIterator = null;
    if (bool)
    {
      if (((List)paramIterable).isEmpty()) {
        paramIterable = localIterator;
      } else {
        paramIterable = ((List)paramIterable).get(((List)paramIterable).size() - 1);
      }
      return paramIterable;
    }
    localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return null;
    }
    for (paramIterable = localIterator.next(); localIterator.hasNext(); paramIterable = localIterator.next()) {}
    return paramIterable;
  }
  
  public static final <T> T lastOrNull(Iterable<? extends T> paramIterable, Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "predicate");
    Object localObject = null;
    Iterator localIterator = paramIterable.iterator();
    paramIterable = (Iterable<? extends T>)localObject;
    while (localIterator.hasNext())
    {
      localObject = localIterator.next();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        paramIterable = (Iterable<? extends T>)localObject;
      }
    }
    return paramIterable;
  }
  
  public static final <T> T lastOrNull(List<? extends T> paramList)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    if (paramList.isEmpty()) {
      paramList = null;
    } else {
      paramList = paramList.get(paramList.size() - 1);
    }
    return paramList;
  }
  
  public static final <T> T lastOrNull(List<? extends T> paramList, Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "predicate");
    ListIterator localListIterator = paramList.listIterator(paramList.size());
    while (localListIterator.hasPrevious())
    {
      paramList = localListIterator.previous();
      if (((Boolean)paramFunction1.invoke(paramList)).booleanValue()) {
        return paramList;
      }
    }
    return null;
  }
  
  public static final <T, R> List<R> map(Iterable<? extends T> paramIterable, Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "transform");
    Collection localCollection = (Collection)new ArrayList(CollectionsKt.collectionSizeOrDefault(paramIterable, 10));
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      localCollection.add(paramFunction1.invoke(paramIterable.next()));
    }
    return (List)localCollection;
  }
  
  public static final <T, R> List<R> mapIndexed(Iterable<? extends T> paramIterable, Function2<? super Integer, ? super T, ? extends R> paramFunction2)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction2, "transform");
    Collection localCollection = (Collection)new ArrayList(CollectionsKt.collectionSizeOrDefault(paramIterable, 10));
    int i = 0;
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext())
    {
      paramIterable = localIterator.next();
      if (i < 0) {
        CollectionsKt.throwIndexOverflow();
      }
      localCollection.add(paramFunction2.invoke(Integer.valueOf(i), paramIterable));
      i++;
    }
    return (List)localCollection;
  }
  
  public static final <T, R> List<R> mapIndexedNotNull(Iterable<? extends T> paramIterable, Function2<? super Integer, ? super T, ? extends R> paramFunction2)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction2, "transform");
    Collection localCollection = (Collection)new ArrayList();
    int i = 0;
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (i < 0) {
        CollectionsKt.throwIndexOverflow();
      }
      localObject = paramFunction2.invoke(Integer.valueOf(i), localObject);
      if (localObject != null) {
        localCollection.add(localObject);
      }
      i++;
    }
    return (List)localCollection;
  }
  
  public static final <T, R, C extends Collection<? super R>> C mapIndexedNotNullTo(Iterable<? extends T> paramIterable, C paramC, Function2<? super Integer, ? super T, ? extends R> paramFunction2)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramC, "destination");
    Intrinsics.checkNotNullParameter(paramFunction2, "transform");
    int i = 0;
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (i < 0) {
        CollectionsKt.throwIndexOverflow();
      }
      localObject = paramFunction2.invoke(Integer.valueOf(i), localObject);
      if (localObject != null) {
        paramC.add(localObject);
      }
      i++;
    }
    return paramC;
  }
  
  public static final <T, R, C extends Collection<? super R>> C mapIndexedTo(Iterable<? extends T> paramIterable, C paramC, Function2<? super Integer, ? super T, ? extends R> paramFunction2)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramC, "destination");
    Intrinsics.checkNotNullParameter(paramFunction2, "transform");
    int i = 0;
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext())
    {
      paramIterable = localIterator.next();
      if (i < 0) {
        CollectionsKt.throwIndexOverflow();
      }
      paramC.add(paramFunction2.invoke(Integer.valueOf(i), paramIterable));
      i++;
    }
    return paramC;
  }
  
  public static final <T, R> List<R> mapNotNull(Iterable<? extends T> paramIterable, Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "transform");
    Collection localCollection = (Collection)new ArrayList();
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramFunction1.invoke(paramIterable.next());
      if (localObject != null) {
        localCollection.add(localObject);
      }
    }
    return (List)localCollection;
  }
  
  public static final <T, R, C extends Collection<? super R>> C mapNotNullTo(Iterable<? extends T> paramIterable, C paramC, Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramC, "destination");
    Intrinsics.checkNotNullParameter(paramFunction1, "transform");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramFunction1.invoke(paramIterable.next());
      if (localObject != null) {
        paramC.add(localObject);
      }
    }
    return paramC;
  }
  
  public static final <T, R, C extends Collection<? super R>> C mapTo(Iterable<? extends T> paramIterable, C paramC, Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramC, "destination");
    Intrinsics.checkNotNullParameter(paramFunction1, "transform");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      paramC.add(paramFunction1.invoke(paramIterable.next()));
    }
    return paramC;
  }
  
  public static final <T, R extends Comparable<? super R>> T maxByOrNull(Iterable<? extends T> paramIterable, Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return null;
    }
    Object localObject2 = localIterator.next();
    if (!localIterator.hasNext()) {
      return (T)localObject2;
    }
    Object localObject1 = (Comparable)paramFunction1.invoke(localObject2);
    Object localObject3;
    do
    {
      Object localObject4 = localIterator.next();
      Comparable localComparable = (Comparable)paramFunction1.invoke(localObject4);
      localObject3 = localObject2;
      paramIterable = (Iterable<? extends T>)localObject1;
      if (((Comparable)localObject1).compareTo(localComparable) < 0)
      {
        localObject3 = localObject4;
        paramIterable = localComparable;
      }
      localObject2 = localObject3;
      localObject1 = paramIterable;
    } while (localIterator.hasNext());
    return (T)localObject3;
  }
  
  public static final <T, R extends Comparable<? super R>> T maxByOrThrow(Iterable<? extends T> paramIterable, Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    Iterator localIterator = paramIterable.iterator();
    if (localIterator.hasNext())
    {
      Object localObject2 = localIterator.next();
      if (!localIterator.hasNext()) {
        return (T)localObject2;
      }
      Object localObject1 = (Comparable)paramFunction1.invoke(localObject2);
      Object localObject3;
      do
      {
        Object localObject4 = localIterator.next();
        Comparable localComparable = (Comparable)paramFunction1.invoke(localObject4);
        localObject3 = localObject2;
        paramIterable = (Iterable<? extends T>)localObject1;
        if (((Comparable)localObject1).compareTo(localComparable) < 0)
        {
          localObject3 = localObject4;
          paramIterable = localComparable;
        }
        localObject2 = localObject3;
        localObject1 = paramIterable;
      } while (localIterator.hasNext());
      return (T)localObject3;
    }
    throw new NoSuchElementException();
  }
  
  private static final <T> double maxOf(Iterable<? extends T> paramIterable, Function1<? super T, Double> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    paramIterable = paramIterable.iterator();
    if (paramIterable.hasNext())
    {
      for (double d = ((Number)paramFunction1.invoke(paramIterable.next())).doubleValue(); paramIterable.hasNext(); d = Math.max(d, ((Number)paramFunction1.invoke(paramIterable.next())).doubleValue())) {}
      return d;
    }
    throw new NoSuchElementException();
  }
  
  private static final <T> float maxOf(Iterable<? extends T> paramIterable, Function1<? super T, Float> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    paramIterable = paramIterable.iterator();
    if (paramIterable.hasNext())
    {
      for (float f = ((Number)paramFunction1.invoke(paramIterable.next())).floatValue(); paramIterable.hasNext(); f = Math.max(f, ((Number)paramFunction1.invoke(paramIterable.next())).floatValue())) {}
      return f;
    }
    throw new NoSuchElementException();
  }
  
  private static final <T, R extends Comparable<? super R>> R maxOf(Iterable<? extends T> paramIterable, Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    Iterator localIterator = paramIterable.iterator();
    if (localIterator.hasNext())
    {
      paramIterable = (Comparable)paramFunction1.invoke(localIterator.next());
      while (localIterator.hasNext())
      {
        Comparable localComparable = (Comparable)paramFunction1.invoke(localIterator.next());
        if (paramIterable.compareTo(localComparable) < 0) {
          paramIterable = localComparable;
        }
      }
      return paramIterable;
    }
    throw new NoSuchElementException();
  }
  
  private static final <T, R extends Comparable<? super R>> R maxOfOrNull(Iterable<? extends T> paramIterable, Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return null;
    }
    paramIterable = (Comparable)paramFunction1.invoke(localIterator.next());
    while (localIterator.hasNext())
    {
      Comparable localComparable = (Comparable)paramFunction1.invoke(localIterator.next());
      if (paramIterable.compareTo(localComparable) < 0) {
        paramIterable = localComparable;
      }
    }
    return paramIterable;
  }
  
  private static final <T> Double maxOfOrNull(Iterable<? extends T> paramIterable, Function1<? super T, Double> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    paramIterable = paramIterable.iterator();
    if (!paramIterable.hasNext()) {
      return null;
    }
    for (double d = ((Number)paramFunction1.invoke(paramIterable.next())).doubleValue(); paramIterable.hasNext(); d = Math.max(d, ((Number)paramFunction1.invoke(paramIterable.next())).doubleValue())) {}
    return Double.valueOf(d);
  }
  
  private static final <T> Float maxOfOrNull(Iterable<? extends T> paramIterable, Function1<? super T, Float> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    paramIterable = paramIterable.iterator();
    if (!paramIterable.hasNext()) {
      return null;
    }
    for (float f = ((Number)paramFunction1.invoke(paramIterable.next())).floatValue(); paramIterable.hasNext(); f = Math.max(f, ((Number)paramFunction1.invoke(paramIterable.next())).floatValue())) {}
    return Float.valueOf(f);
  }
  
  private static final <T, R> R maxOfWith(Iterable<? extends T> paramIterable, Comparator<? super R> paramComparator, Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramComparator, "comparator");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    Iterator localIterator = paramIterable.iterator();
    if (localIterator.hasNext())
    {
      paramIterable = paramFunction1.invoke(localIterator.next());
      while (localIterator.hasNext())
      {
        Object localObject = paramFunction1.invoke(localIterator.next());
        if (paramComparator.compare(paramIterable, localObject) < 0) {
          paramIterable = (Iterable<? extends T>)localObject;
        }
      }
      return paramIterable;
    }
    throw new NoSuchElementException();
  }
  
  private static final <T, R> R maxOfWithOrNull(Iterable<? extends T> paramIterable, Comparator<? super R> paramComparator, Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramComparator, "comparator");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return null;
    }
    paramIterable = paramFunction1.invoke(localIterator.next());
    while (localIterator.hasNext())
    {
      Object localObject = paramFunction1.invoke(localIterator.next());
      if (paramComparator.compare(paramIterable, localObject) < 0) {
        paramIterable = (Iterable<? extends T>)localObject;
      }
    }
    return paramIterable;
  }
  
  public static final <T extends Comparable<? super T>> T maxOrNull(Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return null;
    }
    paramIterable = (Comparable)localIterator.next();
    while (localIterator.hasNext())
    {
      Comparable localComparable = (Comparable)localIterator.next();
      if (paramIterable.compareTo(localComparable) < 0) {
        paramIterable = localComparable;
      }
    }
    return paramIterable;
  }
  
  public static final Double maxOrNull(Iterable<Double> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    paramIterable = paramIterable.iterator();
    if (!paramIterable.hasNext()) {
      return null;
    }
    for (double d = ((Number)paramIterable.next()).doubleValue(); paramIterable.hasNext(); d = Math.max(d, ((Number)paramIterable.next()).doubleValue())) {}
    return Double.valueOf(d);
  }
  
  public static final Float maxOrNull(Iterable<Float> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    paramIterable = paramIterable.iterator();
    if (!paramIterable.hasNext()) {
      return null;
    }
    for (float f = ((Number)paramIterable.next()).floatValue(); paramIterable.hasNext(); f = Math.max(f, ((Number)paramIterable.next()).floatValue())) {}
    return Float.valueOf(f);
  }
  
  public static final double maxOrThrow(Iterable<Double> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    paramIterable = paramIterable.iterator();
    if (paramIterable.hasNext())
    {
      for (double d = ((Number)paramIterable.next()).doubleValue(); paramIterable.hasNext(); d = Math.max(d, ((Number)paramIterable.next()).doubleValue())) {}
      return d;
    }
    throw new NoSuchElementException();
  }
  
  public static final float maxOrThrow(Iterable<Float> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    paramIterable = paramIterable.iterator();
    if (paramIterable.hasNext())
    {
      for (float f = ((Number)paramIterable.next()).floatValue(); paramIterable.hasNext(); f = Math.max(f, ((Number)paramIterable.next()).floatValue())) {}
      return f;
    }
    throw new NoSuchElementException();
  }
  
  public static final <T extends Comparable<? super T>> T maxOrThrow(Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Iterator localIterator = paramIterable.iterator();
    if (localIterator.hasNext())
    {
      paramIterable = (Comparable)localIterator.next();
      while (localIterator.hasNext())
      {
        Comparable localComparable = (Comparable)localIterator.next();
        if (paramIterable.compareTo(localComparable) < 0) {
          paramIterable = localComparable;
        }
      }
      return paramIterable;
    }
    throw new NoSuchElementException();
  }
  
  public static final <T> T maxWithOrNull(Iterable<? extends T> paramIterable, Comparator<? super T> paramComparator)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramComparator, "comparator");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return null;
    }
    paramIterable = localIterator.next();
    while (localIterator.hasNext())
    {
      Object localObject = localIterator.next();
      if (paramComparator.compare(paramIterable, localObject) < 0) {
        paramIterable = (Iterable<? extends T>)localObject;
      }
    }
    return paramIterable;
  }
  
  public static final <T> T maxWithOrThrow(Iterable<? extends T> paramIterable, Comparator<? super T> paramComparator)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramComparator, "comparator");
    Iterator localIterator = paramIterable.iterator();
    if (localIterator.hasNext())
    {
      paramIterable = localIterator.next();
      while (localIterator.hasNext())
      {
        Object localObject = localIterator.next();
        if (paramComparator.compare(paramIterable, localObject) < 0) {
          paramIterable = (Iterable<? extends T>)localObject;
        }
      }
      return paramIterable;
    }
    throw new NoSuchElementException();
  }
  
  public static final <T, R extends Comparable<? super R>> T minByOrNull(Iterable<? extends T> paramIterable, Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return null;
    }
    Object localObject2 = localIterator.next();
    if (!localIterator.hasNext()) {
      return (T)localObject2;
    }
    Object localObject1 = (Comparable)paramFunction1.invoke(localObject2);
    Object localObject3;
    do
    {
      Object localObject4 = localIterator.next();
      Comparable localComparable = (Comparable)paramFunction1.invoke(localObject4);
      localObject3 = localObject2;
      paramIterable = (Iterable<? extends T>)localObject1;
      if (((Comparable)localObject1).compareTo(localComparable) > 0)
      {
        localObject3 = localObject4;
        paramIterable = localComparable;
      }
      localObject2 = localObject3;
      localObject1 = paramIterable;
    } while (localIterator.hasNext());
    return (T)localObject3;
  }
  
  public static final <T, R extends Comparable<? super R>> T minByOrThrow(Iterable<? extends T> paramIterable, Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    Iterator localIterator = paramIterable.iterator();
    if (localIterator.hasNext())
    {
      Object localObject2 = localIterator.next();
      if (!localIterator.hasNext()) {
        return (T)localObject2;
      }
      Object localObject1 = (Comparable)paramFunction1.invoke(localObject2);
      Object localObject3;
      do
      {
        Object localObject4 = localIterator.next();
        Comparable localComparable = (Comparable)paramFunction1.invoke(localObject4);
        localObject3 = localObject2;
        paramIterable = (Iterable<? extends T>)localObject1;
        if (((Comparable)localObject1).compareTo(localComparable) > 0)
        {
          localObject3 = localObject4;
          paramIterable = localComparable;
        }
        localObject2 = localObject3;
        localObject1 = paramIterable;
      } while (localIterator.hasNext());
      return (T)localObject3;
    }
    throw new NoSuchElementException();
  }
  
  private static final <T> double minOf(Iterable<? extends T> paramIterable, Function1<? super T, Double> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    paramIterable = paramIterable.iterator();
    if (paramIterable.hasNext())
    {
      for (double d = ((Number)paramFunction1.invoke(paramIterable.next())).doubleValue(); paramIterable.hasNext(); d = Math.min(d, ((Number)paramFunction1.invoke(paramIterable.next())).doubleValue())) {}
      return d;
    }
    throw new NoSuchElementException();
  }
  
  private static final <T> float minOf(Iterable<? extends T> paramIterable, Function1<? super T, Float> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    paramIterable = paramIterable.iterator();
    if (paramIterable.hasNext())
    {
      for (float f = ((Number)paramFunction1.invoke(paramIterable.next())).floatValue(); paramIterable.hasNext(); f = Math.min(f, ((Number)paramFunction1.invoke(paramIterable.next())).floatValue())) {}
      return f;
    }
    throw new NoSuchElementException();
  }
  
  private static final <T, R extends Comparable<? super R>> R minOf(Iterable<? extends T> paramIterable, Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    Iterator localIterator = paramIterable.iterator();
    if (localIterator.hasNext())
    {
      paramIterable = (Comparable)paramFunction1.invoke(localIterator.next());
      while (localIterator.hasNext())
      {
        Comparable localComparable = (Comparable)paramFunction1.invoke(localIterator.next());
        if (paramIterable.compareTo(localComparable) > 0) {
          paramIterable = localComparable;
        }
      }
      return paramIterable;
    }
    throw new NoSuchElementException();
  }
  
  private static final <T, R extends Comparable<? super R>> R minOfOrNull(Iterable<? extends T> paramIterable, Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return null;
    }
    paramIterable = (Comparable)paramFunction1.invoke(localIterator.next());
    while (localIterator.hasNext())
    {
      Comparable localComparable = (Comparable)paramFunction1.invoke(localIterator.next());
      if (paramIterable.compareTo(localComparable) > 0) {
        paramIterable = localComparable;
      }
    }
    return paramIterable;
  }
  
  private static final <T> Double minOfOrNull(Iterable<? extends T> paramIterable, Function1<? super T, Double> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    paramIterable = paramIterable.iterator();
    if (!paramIterable.hasNext()) {
      return null;
    }
    for (double d = ((Number)paramFunction1.invoke(paramIterable.next())).doubleValue(); paramIterable.hasNext(); d = Math.min(d, ((Number)paramFunction1.invoke(paramIterable.next())).doubleValue())) {}
    return Double.valueOf(d);
  }
  
  private static final <T> Float minOfOrNull(Iterable<? extends T> paramIterable, Function1<? super T, Float> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    paramIterable = paramIterable.iterator();
    if (!paramIterable.hasNext()) {
      return null;
    }
    for (float f = ((Number)paramFunction1.invoke(paramIterable.next())).floatValue(); paramIterable.hasNext(); f = Math.min(f, ((Number)paramFunction1.invoke(paramIterable.next())).floatValue())) {}
    return Float.valueOf(f);
  }
  
  private static final <T, R> R minOfWith(Iterable<? extends T> paramIterable, Comparator<? super R> paramComparator, Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramComparator, "comparator");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    Iterator localIterator = paramIterable.iterator();
    if (localIterator.hasNext())
    {
      paramIterable = paramFunction1.invoke(localIterator.next());
      while (localIterator.hasNext())
      {
        Object localObject = paramFunction1.invoke(localIterator.next());
        if (paramComparator.compare(paramIterable, localObject) > 0) {
          paramIterable = (Iterable<? extends T>)localObject;
        }
      }
      return paramIterable;
    }
    throw new NoSuchElementException();
  }
  
  private static final <T, R> R minOfWithOrNull(Iterable<? extends T> paramIterable, Comparator<? super R> paramComparator, Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramComparator, "comparator");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return null;
    }
    paramIterable = paramFunction1.invoke(localIterator.next());
    while (localIterator.hasNext())
    {
      Object localObject = paramFunction1.invoke(localIterator.next());
      if (paramComparator.compare(paramIterable, localObject) > 0) {
        paramIterable = (Iterable<? extends T>)localObject;
      }
    }
    return paramIterable;
  }
  
  public static final <T extends Comparable<? super T>> T minOrNull(Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return null;
    }
    paramIterable = (Comparable)localIterator.next();
    while (localIterator.hasNext())
    {
      Comparable localComparable = (Comparable)localIterator.next();
      if (paramIterable.compareTo(localComparable) > 0) {
        paramIterable = localComparable;
      }
    }
    return paramIterable;
  }
  
  public static final Double minOrNull(Iterable<Double> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    paramIterable = paramIterable.iterator();
    if (!paramIterable.hasNext()) {
      return null;
    }
    for (double d = ((Number)paramIterable.next()).doubleValue(); paramIterable.hasNext(); d = Math.min(d, ((Number)paramIterable.next()).doubleValue())) {}
    return Double.valueOf(d);
  }
  
  public static final Float minOrNull(Iterable<Float> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    paramIterable = paramIterable.iterator();
    if (!paramIterable.hasNext()) {
      return null;
    }
    for (float f = ((Number)paramIterable.next()).floatValue(); paramIterable.hasNext(); f = Math.min(f, ((Number)paramIterable.next()).floatValue())) {}
    return Float.valueOf(f);
  }
  
  public static final double minOrThrow(Iterable<Double> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    paramIterable = paramIterable.iterator();
    if (paramIterable.hasNext())
    {
      for (double d = ((Number)paramIterable.next()).doubleValue(); paramIterable.hasNext(); d = Math.min(d, ((Number)paramIterable.next()).doubleValue())) {}
      return d;
    }
    throw new NoSuchElementException();
  }
  
  public static final float minOrThrow(Iterable<Float> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    paramIterable = paramIterable.iterator();
    if (paramIterable.hasNext())
    {
      for (float f = ((Number)paramIterable.next()).floatValue(); paramIterable.hasNext(); f = Math.min(f, ((Number)paramIterable.next()).floatValue())) {}
      return f;
    }
    throw new NoSuchElementException();
  }
  
  public static final <T extends Comparable<? super T>> T minOrThrow(Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Iterator localIterator = paramIterable.iterator();
    if (localIterator.hasNext())
    {
      paramIterable = (Comparable)localIterator.next();
      while (localIterator.hasNext())
      {
        Comparable localComparable = (Comparable)localIterator.next();
        if (paramIterable.compareTo(localComparable) > 0) {
          paramIterable = localComparable;
        }
      }
      return paramIterable;
    }
    throw new NoSuchElementException();
  }
  
  public static final <T> T minWithOrNull(Iterable<? extends T> paramIterable, Comparator<? super T> paramComparator)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramComparator, "comparator");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return null;
    }
    paramIterable = localIterator.next();
    while (localIterator.hasNext())
    {
      Object localObject = localIterator.next();
      if (paramComparator.compare(paramIterable, localObject) > 0) {
        paramIterable = (Iterable<? extends T>)localObject;
      }
    }
    return paramIterable;
  }
  
  public static final <T> T minWithOrThrow(Iterable<? extends T> paramIterable, Comparator<? super T> paramComparator)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramComparator, "comparator");
    Iterator localIterator = paramIterable.iterator();
    if (localIterator.hasNext())
    {
      paramIterable = localIterator.next();
      while (localIterator.hasNext())
      {
        Object localObject = localIterator.next();
        if (paramComparator.compare(paramIterable, localObject) > 0) {
          paramIterable = (Iterable<? extends T>)localObject;
        }
      }
      return paramIterable;
    }
    throw new NoSuchElementException();
  }
  
  public static final <T> List<T> minus(Iterable<? extends T> paramIterable1, Iterable<? extends T> paramIterable2)
  {
    Intrinsics.checkNotNullParameter(paramIterable1, "<this>");
    Intrinsics.checkNotNullParameter(paramIterable2, "elements");
    Collection localCollection = BrittleContainsOptimizationKt.convertToSetForSetOperationWith(paramIterable2, paramIterable1);
    if (localCollection.isEmpty()) {
      return CollectionsKt.toList(paramIterable1);
    }
    paramIterable2 = (Collection)new ArrayList();
    paramIterable1 = paramIterable1.iterator();
    while (paramIterable1.hasNext())
    {
      Object localObject = paramIterable1.next();
      if (!localCollection.contains(localObject)) {
        paramIterable2.add(localObject);
      }
    }
    paramIterable1 = (List)paramIterable2;
    return paramIterable1;
  }
  
  public static final <T> List<T> minus(Iterable<? extends T> paramIterable, T paramT)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    ArrayList localArrayList = new ArrayList(CollectionsKt.collectionSizeOrDefault(paramIterable, 10));
    int i = 0;
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext())
    {
      paramIterable = localIterator.next();
      int j;
      int k;
      if ((i == 0) && (Intrinsics.areEqual(paramIterable, paramT)))
      {
        j = 1;
        k = 0;
      }
      else
      {
        k = 1;
        j = i;
      }
      i = j;
      if (k != 0)
      {
        ((Collection)localArrayList).add(paramIterable);
        i = j;
      }
    }
    return (List)localArrayList;
  }
  
  public static final <T> List<T> minus(Iterable<? extends T> paramIterable, Sequence<? extends T> paramSequence)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramSequence, "elements");
    Collection localCollection = BrittleContainsOptimizationKt.convertToSetForSetOperation(paramSequence);
    if (localCollection.isEmpty()) {
      return CollectionsKt.toList(paramIterable);
    }
    paramSequence = (Collection)new ArrayList();
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext())
    {
      paramIterable = localIterator.next();
      if (!localCollection.contains(paramIterable)) {
        paramSequence.add(paramIterable);
      }
    }
    paramIterable = (List)paramSequence;
    return paramIterable;
  }
  
  public static final <T> List<T> minus(Iterable<? extends T> paramIterable, T[] paramArrayOfT)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramArrayOfT, "elements");
    int i;
    if (paramArrayOfT.length == 0) {
      i = 1;
    } else {
      i = 0;
    }
    if (i != 0) {
      return CollectionsKt.toList(paramIterable);
    }
    paramArrayOfT = BrittleContainsOptimizationKt.convertToSetForSetOperation(paramArrayOfT);
    Collection localCollection = (Collection)new ArrayList();
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext())
    {
      paramIterable = localIterator.next();
      if (!paramArrayOfT.contains(paramIterable)) {
        localCollection.add(paramIterable);
      }
    }
    paramIterable = (List)localCollection;
    return paramIterable;
  }
  
  private static final <T> List<T> minusElement(Iterable<? extends T> paramIterable, T paramT)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    return CollectionsKt.minus(paramIterable, paramT);
  }
  
  public static final <T> boolean none(Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    if ((paramIterable instanceof Collection)) {
      return ((Collection)paramIterable).isEmpty();
    }
    return paramIterable.iterator().hasNext() ^ true;
  }
  
  public static final <T> boolean none(Iterable<? extends T> paramIterable, Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "predicate");
    if (((paramIterable instanceof Collection)) && (((Collection)paramIterable).isEmpty())) {
      return true;
    }
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      if (((Boolean)paramFunction1.invoke(paramIterable.next())).booleanValue()) {
        return false;
      }
    }
    return true;
  }
  
  public static final <T, C extends Iterable<? extends T>> C onEach(C paramC, Function1<? super T, Unit> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramC, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "action");
    Iterator localIterator = paramC.iterator();
    while (localIterator.hasNext()) {
      paramFunction1.invoke(localIterator.next());
    }
    return paramC;
  }
  
  public static final <T, C extends Iterable<? extends T>> C onEachIndexed(C paramC, Function2<? super Integer, ? super T, Unit> paramFunction2)
  {
    Intrinsics.checkNotNullParameter(paramC, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction2, "action");
    int i = 0;
    Iterator localIterator = paramC.iterator();
    while (localIterator.hasNext())
    {
      Object localObject = localIterator.next();
      if (i < 0) {
        CollectionsKt.throwIndexOverflow();
      }
      paramFunction2.invoke(Integer.valueOf(i), localObject);
      i++;
    }
    return paramC;
  }
  
  public static final <T> Pair<List<T>, List<T>> partition(Iterable<? extends T> paramIterable, Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "predicate");
    ArrayList localArrayList2 = new ArrayList();
    ArrayList localArrayList1 = new ArrayList();
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        localArrayList2.add(localObject);
      } else {
        localArrayList1.add(localObject);
      }
    }
    return new Pair(localArrayList2, localArrayList1);
  }
  
  public static final <T> List<T> plus(Iterable<? extends T> paramIterable1, Iterable<? extends T> paramIterable2)
  {
    Intrinsics.checkNotNullParameter(paramIterable1, "<this>");
    Intrinsics.checkNotNullParameter(paramIterable2, "elements");
    if ((paramIterable1 instanceof Collection)) {
      return CollectionsKt.plus((Collection)paramIterable1, paramIterable2);
    }
    ArrayList localArrayList = new ArrayList();
    CollectionsKt.addAll((Collection)localArrayList, paramIterable1);
    CollectionsKt.addAll((Collection)localArrayList, paramIterable2);
    return (List)localArrayList;
  }
  
  public static final <T> List<T> plus(Iterable<? extends T> paramIterable, T paramT)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    if ((paramIterable instanceof Collection)) {
      return CollectionsKt.plus((Collection)paramIterable, paramT);
    }
    ArrayList localArrayList = new ArrayList();
    CollectionsKt.addAll((Collection)localArrayList, paramIterable);
    localArrayList.add(paramT);
    return (List)localArrayList;
  }
  
  public static final <T> List<T> plus(Iterable<? extends T> paramIterable, Sequence<? extends T> paramSequence)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramSequence, "elements");
    ArrayList localArrayList = new ArrayList();
    CollectionsKt.addAll((Collection)localArrayList, paramIterable);
    CollectionsKt.addAll((Collection)localArrayList, paramSequence);
    return (List)localArrayList;
  }
  
  public static final <T> List<T> plus(Iterable<? extends T> paramIterable, T[] paramArrayOfT)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramArrayOfT, "elements");
    if ((paramIterable instanceof Collection)) {
      return CollectionsKt.plus((Collection)paramIterable, paramArrayOfT);
    }
    ArrayList localArrayList = new ArrayList();
    CollectionsKt.addAll((Collection)localArrayList, paramIterable);
    CollectionsKt.addAll((Collection)localArrayList, paramArrayOfT);
    return (List)localArrayList;
  }
  
  public static final <T> List<T> plus(Collection<? extends T> paramCollection, Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramCollection, "<this>");
    Intrinsics.checkNotNullParameter(paramIterable, "elements");
    if ((paramIterable instanceof Collection))
    {
      ArrayList localArrayList = new ArrayList(paramCollection.size() + ((Collection)paramIterable).size());
      localArrayList.addAll(paramCollection);
      localArrayList.addAll((Collection)paramIterable);
      return (List)localArrayList;
    }
    paramCollection = new ArrayList(paramCollection);
    CollectionsKt.addAll((Collection)paramCollection, paramIterable);
    return (List)paramCollection;
  }
  
  public static final <T> List<T> plus(Collection<? extends T> paramCollection, T paramT)
  {
    Intrinsics.checkNotNullParameter(paramCollection, "<this>");
    ArrayList localArrayList = new ArrayList(paramCollection.size() + 1);
    localArrayList.addAll(paramCollection);
    localArrayList.add(paramT);
    return (List)localArrayList;
  }
  
  public static final <T> List<T> plus(Collection<? extends T> paramCollection, Sequence<? extends T> paramSequence)
  {
    Intrinsics.checkNotNullParameter(paramCollection, "<this>");
    Intrinsics.checkNotNullParameter(paramSequence, "elements");
    ArrayList localArrayList = new ArrayList(paramCollection.size() + 10);
    localArrayList.addAll(paramCollection);
    CollectionsKt.addAll((Collection)localArrayList, paramSequence);
    return (List)localArrayList;
  }
  
  public static final <T> List<T> plus(Collection<? extends T> paramCollection, T[] paramArrayOfT)
  {
    Intrinsics.checkNotNullParameter(paramCollection, "<this>");
    Intrinsics.checkNotNullParameter(paramArrayOfT, "elements");
    ArrayList localArrayList = new ArrayList(paramCollection.size() + paramArrayOfT.length);
    localArrayList.addAll(paramCollection);
    CollectionsKt.addAll((Collection)localArrayList, paramArrayOfT);
    return (List)localArrayList;
  }
  
  private static final <T> List<T> plusElement(Iterable<? extends T> paramIterable, T paramT)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    return CollectionsKt.plus(paramIterable, paramT);
  }
  
  private static final <T> List<T> plusElement(Collection<? extends T> paramCollection, T paramT)
  {
    Intrinsics.checkNotNullParameter(paramCollection, "<this>");
    return CollectionsKt.plus(paramCollection, paramT);
  }
  
  private static final <T> T random(Collection<? extends T> paramCollection)
  {
    Intrinsics.checkNotNullParameter(paramCollection, "<this>");
    return (T)CollectionsKt.random(paramCollection, (Random)Random.Default);
  }
  
  public static final <T> T random(Collection<? extends T> paramCollection, Random paramRandom)
  {
    Intrinsics.checkNotNullParameter(paramCollection, "<this>");
    Intrinsics.checkNotNullParameter(paramRandom, "random");
    if (!paramCollection.isEmpty()) {
      return (T)CollectionsKt.elementAt((Iterable)paramCollection, paramRandom.nextInt(paramCollection.size()));
    }
    throw new NoSuchElementException("Collection is empty.");
  }
  
  private static final <T> T randomOrNull(Collection<? extends T> paramCollection)
  {
    Intrinsics.checkNotNullParameter(paramCollection, "<this>");
    return (T)CollectionsKt.randomOrNull(paramCollection, (Random)Random.Default);
  }
  
  public static final <T> T randomOrNull(Collection<? extends T> paramCollection, Random paramRandom)
  {
    Intrinsics.checkNotNullParameter(paramCollection, "<this>");
    Intrinsics.checkNotNullParameter(paramRandom, "random");
    if (paramCollection.isEmpty()) {
      return null;
    }
    return (T)CollectionsKt.elementAt((Iterable)paramCollection, paramRandom.nextInt(paramCollection.size()));
  }
  
  public static final <S, T extends S> S reduce(Iterable<? extends T> paramIterable, Function2<? super S, ? super T, ? extends S> paramFunction2)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction2, "operation");
    Iterator localIterator = paramIterable.iterator();
    if (localIterator.hasNext())
    {
      for (paramIterable = localIterator.next(); localIterator.hasNext(); paramIterable = paramFunction2.invoke(paramIterable, localIterator.next())) {}
      return paramIterable;
    }
    throw new UnsupportedOperationException("Empty collection can't be reduced.");
  }
  
  public static final <S, T extends S> S reduceIndexed(Iterable<? extends T> paramIterable, Function3<? super Integer, ? super S, ? super T, ? extends S> paramFunction3)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction3, "operation");
    Iterator localIterator = paramIterable.iterator();
    if (localIterator.hasNext())
    {
      int i = 1;
      paramIterable = localIterator.next();
      while (localIterator.hasNext())
      {
        if (i < 0) {
          CollectionsKt.throwIndexOverflow();
        }
        paramIterable = paramFunction3.invoke(Integer.valueOf(i), paramIterable, localIterator.next());
        i++;
      }
      return paramIterable;
    }
    throw new UnsupportedOperationException("Empty collection can't be reduced.");
  }
  
  public static final <S, T extends S> S reduceIndexedOrNull(Iterable<? extends T> paramIterable, Function3<? super Integer, ? super S, ? super T, ? extends S> paramFunction3)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction3, "operation");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return null;
    }
    int i = 1;
    paramIterable = localIterator.next();
    while (localIterator.hasNext())
    {
      if (i < 0) {
        CollectionsKt.throwIndexOverflow();
      }
      paramIterable = paramFunction3.invoke(Integer.valueOf(i), paramIterable, localIterator.next());
      i++;
    }
    return paramIterable;
  }
  
  public static final <S, T extends S> S reduceOrNull(Iterable<? extends T> paramIterable, Function2<? super S, ? super T, ? extends S> paramFunction2)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction2, "operation");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return null;
    }
    for (paramIterable = localIterator.next(); localIterator.hasNext(); paramIterable = paramFunction2.invoke(paramIterable, localIterator.next())) {}
    return paramIterable;
  }
  
  public static final <S, T extends S> S reduceRight(List<? extends T> paramList, Function2<? super T, ? super S, ? extends S> paramFunction2)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction2, "operation");
    ListIterator localListIterator = paramList.listIterator(paramList.size());
    if (localListIterator.hasPrevious())
    {
      for (paramList = localListIterator.previous(); localListIterator.hasPrevious(); paramList = paramFunction2.invoke(localListIterator.previous(), paramList)) {}
      return paramList;
    }
    throw new UnsupportedOperationException("Empty list can't be reduced.");
  }
  
  public static final <S, T extends S> S reduceRightIndexed(List<? extends T> paramList, Function3<? super Integer, ? super T, ? super S, ? extends S> paramFunction3)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction3, "operation");
    ListIterator localListIterator = paramList.listIterator(paramList.size());
    if (localListIterator.hasPrevious())
    {
      for (paramList = localListIterator.previous(); localListIterator.hasPrevious(); paramList = paramFunction3.invoke(Integer.valueOf(localListIterator.previousIndex()), localListIterator.previous(), paramList)) {}
      return paramList;
    }
    throw new UnsupportedOperationException("Empty list can't be reduced.");
  }
  
  public static final <S, T extends S> S reduceRightIndexedOrNull(List<? extends T> paramList, Function3<? super Integer, ? super T, ? super S, ? extends S> paramFunction3)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction3, "operation");
    ListIterator localListIterator = paramList.listIterator(paramList.size());
    if (!localListIterator.hasPrevious()) {
      return null;
    }
    for (paramList = localListIterator.previous(); localListIterator.hasPrevious(); paramList = paramFunction3.invoke(Integer.valueOf(localListIterator.previousIndex()), localListIterator.previous(), paramList)) {}
    return paramList;
  }
  
  public static final <S, T extends S> S reduceRightOrNull(List<? extends T> paramList, Function2<? super T, ? super S, ? extends S> paramFunction2)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction2, "operation");
    ListIterator localListIterator = paramList.listIterator(paramList.size());
    if (!localListIterator.hasPrevious()) {
      return null;
    }
    for (paramList = localListIterator.previous(); localListIterator.hasPrevious(); paramList = paramFunction2.invoke(localListIterator.previous(), paramList)) {}
    return paramList;
  }
  
  public static final <T> Iterable<T> requireNoNulls(Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext()) {
      if (localIterator.next() == null) {
        throw new IllegalArgumentException("null element found in " + paramIterable + '.');
      }
    }
    return paramIterable;
  }
  
  public static final <T> List<T> requireNoNulls(List<? extends T> paramList)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    Iterator localIterator = paramList.iterator();
    while (localIterator.hasNext()) {
      if (localIterator.next() == null) {
        throw new IllegalArgumentException("null element found in " + paramList + '.');
      }
    }
    return paramList;
  }
  
  public static final <T> List<T> reversed(Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    if (((paramIterable instanceof Collection)) && (((Collection)paramIterable).size() <= 1)) {
      return CollectionsKt.toList(paramIterable);
    }
    paramIterable = CollectionsKt.toMutableList(paramIterable);
    CollectionsKt.reverse(paramIterable);
    return paramIterable;
  }
  
  public static final <T, R> List<R> runningFold(Iterable<? extends T> paramIterable, R paramR, Function2<? super R, ? super T, ? extends R> paramFunction2)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction2, "operation");
    int i = CollectionsKt.collectionSizeOrDefault(paramIterable, 9);
    if (i == 0) {
      return CollectionsKt.listOf(paramR);
    }
    ArrayList localArrayList = new ArrayList(i + 1);
    localArrayList.add(paramR);
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      paramR = paramFunction2.invoke(paramR, paramIterable.next());
      localArrayList.add(paramR);
    }
    return (List)localArrayList;
  }
  
  public static final <T, R> List<R> runningFoldIndexed(Iterable<? extends T> paramIterable, R paramR, Function3<? super Integer, ? super R, ? super T, ? extends R> paramFunction3)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction3, "operation");
    int i = CollectionsKt.collectionSizeOrDefault(paramIterable, 9);
    if (i == 0) {
      return CollectionsKt.listOf(paramR);
    }
    ArrayList localArrayList = new ArrayList(i + 1);
    localArrayList.add(paramR);
    i = 0;
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      paramR = paramFunction3.invoke(Integer.valueOf(i), paramR, paramIterable.next());
      localArrayList.add(paramR);
      i++;
    }
    return (List)localArrayList;
  }
  
  public static final <S, T extends S> List<S> runningReduce(Iterable<? extends T> paramIterable, Function2<? super S, ? super T, ? extends S> paramFunction2)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction2, "operation");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return CollectionsKt.emptyList();
    }
    Object localObject = localIterator.next();
    ArrayList localArrayList = new ArrayList(CollectionsKt.collectionSizeOrDefault(paramIterable, 10));
    localArrayList.add(localObject);
    paramIterable = (Iterable<? extends T>)localObject;
    while (localIterator.hasNext())
    {
      paramIterable = paramFunction2.invoke(paramIterable, localIterator.next());
      localArrayList.add(paramIterable);
    }
    return (List)localArrayList;
  }
  
  public static final <S, T extends S> List<S> runningReduceIndexed(Iterable<? extends T> paramIterable, Function3<? super Integer, ? super S, ? super T, ? extends S> paramFunction3)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction3, "operation");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return CollectionsKt.emptyList();
    }
    Object localObject = localIterator.next();
    ArrayList localArrayList = new ArrayList(CollectionsKt.collectionSizeOrDefault(paramIterable, 10));
    localArrayList.add(localObject);
    int i = 1;
    paramIterable = (Iterable<? extends T>)localObject;
    while (localIterator.hasNext())
    {
      paramIterable = paramFunction3.invoke(Integer.valueOf(i), paramIterable, localIterator.next());
      localArrayList.add(paramIterable);
      i++;
    }
    return (List)localArrayList;
  }
  
  public static final <T, R> List<R> scan(Iterable<? extends T> paramIterable, R paramR, Function2<? super R, ? super T, ? extends R> paramFunction2)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction2, "operation");
    int i = CollectionsKt.collectionSizeOrDefault(paramIterable, 9);
    if (i == 0)
    {
      paramIterable = CollectionsKt.listOf(paramR);
    }
    else
    {
      ArrayList localArrayList = new ArrayList(i + 1);
      localArrayList.add(paramR);
      paramIterable = paramIterable.iterator();
      while (paramIterable.hasNext())
      {
        paramR = paramFunction2.invoke(paramR, paramIterable.next());
        localArrayList.add(paramR);
      }
      paramIterable = (List)localArrayList;
    }
    return paramIterable;
  }
  
  public static final <T, R> List<R> scanIndexed(Iterable<? extends T> paramIterable, R paramR, Function3<? super Integer, ? super R, ? super T, ? extends R> paramFunction3)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction3, "operation");
    int i = CollectionsKt.collectionSizeOrDefault(paramIterable, 9);
    if (i == 0)
    {
      paramIterable = CollectionsKt.listOf(paramR);
    }
    else
    {
      ArrayList localArrayList = new ArrayList(i + 1);
      localArrayList.add(paramR);
      i = 0;
      paramIterable = paramIterable.iterator();
      while (paramIterable.hasNext())
      {
        paramR = paramFunction3.invoke(Integer.valueOf(i), paramR, paramIterable.next());
        localArrayList.add(paramR);
        i++;
      }
      paramIterable = (List)localArrayList;
    }
    return paramIterable;
  }
  
  public static final <T> void shuffle(List<T> paramList, Random paramRandom)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    Intrinsics.checkNotNullParameter(paramRandom, "random");
    for (int i = CollectionsKt.getLastIndex(paramList); i > 0; i--)
    {
      int j = paramRandom.nextInt(i + 1);
      paramList.set(j, paramList.set(i, paramList.get(j)));
    }
  }
  
  public static final <T> T single(Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    if ((paramIterable instanceof List)) {
      return (T)CollectionsKt.single((List)paramIterable);
    }
    paramIterable = paramIterable.iterator();
    if (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (!paramIterable.hasNext()) {
        return (T)localObject;
      }
      throw new IllegalArgumentException("Collection has more than one element.");
    }
    throw new NoSuchElementException("Collection is empty.");
  }
  
  public static final <T> T single(Iterable<? extends T> paramIterable, Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "predicate");
    Object localObject = null;
    int i = 0;
    Iterator localIterator = paramIterable.iterator();
    paramIterable = (Iterable<? extends T>)localObject;
    while (localIterator.hasNext())
    {
      localObject = localIterator.next();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        if (i == 0)
        {
          paramIterable = (Iterable<? extends T>)localObject;
          i = 1;
        }
        else
        {
          throw new IllegalArgumentException("Collection contains more than one matching element.");
        }
      }
    }
    if (i != 0) {
      return paramIterable;
    }
    throw new NoSuchElementException("Collection contains no element matching the predicate.");
  }
  
  public static final <T> T single(List<? extends T> paramList)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    switch (paramList.size())
    {
    default: 
      throw new IllegalArgumentException("List has more than one element.");
    case 1: 
      return (T)paramList.get(0);
    }
    throw new NoSuchElementException("List is empty.");
  }
  
  public static final <T> T singleOrNull(Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    boolean bool = paramIterable instanceof List;
    Object localObject = null;
    if (bool)
    {
      if (((List)paramIterable).size() == 1) {
        localObject = ((List)paramIterable).get(0);
      }
      return (T)localObject;
    }
    paramIterable = paramIterable.iterator();
    if (!paramIterable.hasNext()) {
      return null;
    }
    localObject = paramIterable.next();
    if (paramIterable.hasNext()) {
      return null;
    }
    return (T)localObject;
  }
  
  public static final <T> T singleOrNull(Iterable<? extends T> paramIterable, Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "predicate");
    Object localObject = null;
    int i = 0;
    Iterator localIterator = paramIterable.iterator();
    paramIterable = (Iterable<? extends T>)localObject;
    while (localIterator.hasNext())
    {
      localObject = localIterator.next();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue())
      {
        if (i != 0) {
          return null;
        }
        paramIterable = (Iterable<? extends T>)localObject;
        i = 1;
      }
    }
    if (i == 0) {
      return null;
    }
    return paramIterable;
  }
  
  public static final <T> T singleOrNull(List<? extends T> paramList)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    if (paramList.size() == 1) {
      paramList = paramList.get(0);
    } else {
      paramList = null;
    }
    return paramList;
  }
  
  public static final <T> List<T> slice(List<? extends T> paramList, Iterable<Integer> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    Intrinsics.checkNotNullParameter(paramIterable, "indices");
    int i = CollectionsKt.collectionSizeOrDefault(paramIterable, 10);
    if (i == 0) {
      return CollectionsKt.emptyList();
    }
    ArrayList localArrayList = new ArrayList(i);
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      localArrayList.add(paramList.get(((Number)paramIterable.next()).intValue()));
    }
    return (List)localArrayList;
  }
  
  public static final <T> List<T> slice(List<? extends T> paramList, IntRange paramIntRange)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    Intrinsics.checkNotNullParameter(paramIntRange, "indices");
    if (paramIntRange.isEmpty()) {
      return CollectionsKt.emptyList();
    }
    return CollectionsKt.toList((Iterable)paramList.subList(paramIntRange.getStart().intValue(), paramIntRange.getEndInclusive().intValue() + 1));
  }
  
  public static final <T, R extends Comparable<? super R>> void sortBy(List<T> paramList, Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    if (paramList.size() > 1) {
      CollectionsKt.sortWith(paramList, (Comparator)new ComparisonsKt__ComparisonsKt.compareBy.2(paramFunction1));
    }
  }
  
  public static final <T, R extends Comparable<? super R>> void sortByDescending(List<T> paramList, Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    if (paramList.size() > 1) {
      CollectionsKt.sortWith(paramList, (Comparator)new ComparisonsKt__ComparisonsKt.compareByDescending.1(paramFunction1));
    }
  }
  
  public static final <T extends Comparable<? super T>> void sortDescending(List<T> paramList)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    CollectionsKt.sortWith(paramList, ComparisonsKt.reverseOrder());
  }
  
  public static final <T extends Comparable<? super T>> List<T> sorted(Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    if ((paramIterable instanceof Collection))
    {
      if (((Collection)paramIterable).size() <= 1) {
        return CollectionsKt.toList(paramIterable);
      }
      paramIterable = (Collection)paramIterable;
      paramIterable = paramIterable.toArray(new Comparable[0]);
      Intrinsics.checkNotNull(paramIterable, "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray>");
      Intrinsics.checkNotNull(paramIterable, "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.CollectionsKt___CollectionsKt.sorted>");
      paramIterable = (Comparable[])paramIterable;
      ArraysKt.sort((Object[])paramIterable);
      return ArraysKt.asList((Object[])paramIterable);
    }
    paramIterable = CollectionsKt.toMutableList(paramIterable);
    CollectionsKt.sort(paramIterable);
    return paramIterable;
  }
  
  public static final <T, R extends Comparable<? super R>> List<T> sortedBy(Iterable<? extends T> paramIterable, Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    return CollectionsKt.sortedWith(paramIterable, (Comparator)new ComparisonsKt__ComparisonsKt.compareBy.2(paramFunction1));
  }
  
  public static final <T, R extends Comparable<? super R>> List<T> sortedByDescending(Iterable<? extends T> paramIterable, Function1<? super T, ? extends R> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    return CollectionsKt.sortedWith(paramIterable, (Comparator)new ComparisonsKt__ComparisonsKt.compareByDescending.1(paramFunction1));
  }
  
  public static final <T extends Comparable<? super T>> List<T> sortedDescending(Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    return CollectionsKt.sortedWith(paramIterable, ComparisonsKt.reverseOrder());
  }
  
  public static final <T> List<T> sortedWith(Iterable<? extends T> paramIterable, Comparator<? super T> paramComparator)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramComparator, "comparator");
    if ((paramIterable instanceof Collection))
    {
      if (((Collection)paramIterable).size() <= 1) {
        return CollectionsKt.toList(paramIterable);
      }
      paramIterable = (Collection)paramIterable;
      paramIterable = paramIterable.toArray(new Object[0]);
      Intrinsics.checkNotNull(paramIterable, "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray>");
      Intrinsics.checkNotNull(paramIterable, "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.CollectionsKt___CollectionsKt.sortedWith>");
      ArraysKt.sortWith(paramIterable, paramComparator);
      return ArraysKt.asList(paramIterable);
    }
    paramIterable = CollectionsKt.toMutableList(paramIterable);
    CollectionsKt.sortWith(paramIterable, paramComparator);
    return paramIterable;
  }
  
  public static final <T> Set<T> subtract(Iterable<? extends T> paramIterable1, Iterable<? extends T> paramIterable2)
  {
    Intrinsics.checkNotNullParameter(paramIterable1, "<this>");
    Intrinsics.checkNotNullParameter(paramIterable2, "other");
    paramIterable1 = CollectionsKt.toMutableSet(paramIterable1);
    CollectionsKt.removeAll((Collection)paramIterable1, paramIterable2);
    return paramIterable1;
  }
  
  @Deprecated(message="Use sumOf instead.", replaceWith=@ReplaceWith(expression="this.sumOf(selector)", imports={}))
  @DeprecatedSinceKotlin(warningSince="1.5")
  public static final <T> int sumBy(Iterable<? extends T> paramIterable, Function1<? super T, Integer> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    int i = 0;
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      i += ((Number)paramFunction1.invoke(paramIterable.next())).intValue();
    }
    return i;
  }
  
  @Deprecated(message="Use sumOf instead.", replaceWith=@ReplaceWith(expression="this.sumOf(selector)", imports={}))
  @DeprecatedSinceKotlin(warningSince="1.5")
  public static final <T> double sumByDouble(Iterable<? extends T> paramIterable, Function1<? super T, Double> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    double d = 0.0D;
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      d += ((Number)paramFunction1.invoke(paramIterable.next())).doubleValue();
    }
    return d;
  }
  
  public static final int sumOfByte(Iterable<Byte> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    int i = 0;
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      i += ((Number)paramIterable.next()).byteValue();
    }
    return i;
  }
  
  public static final double sumOfDouble(Iterable<Double> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    double d = 0.0D;
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      d += ((Number)paramIterable.next()).doubleValue();
    }
    return d;
  }
  
  private static final <T> double sumOfDouble(Iterable<? extends T> paramIterable, Function1<? super T, Double> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    double d = 0.0D;
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      d += ((Number)paramFunction1.invoke(paramIterable.next())).doubleValue();
    }
    return d;
  }
  
  public static final float sumOfFloat(Iterable<Float> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    float f = 0.0F;
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      f += ((Number)paramIterable.next()).floatValue();
    }
    return f;
  }
  
  public static final int sumOfInt(Iterable<Integer> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    int i = 0;
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      i += ((Number)paramIterable.next()).intValue();
    }
    return i;
  }
  
  private static final <T> int sumOfInt(Iterable<? extends T> paramIterable, Function1<? super T, Integer> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    int i = 0;
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      i += ((Number)paramFunction1.invoke(paramIterable.next())).intValue();
    }
    return i;
  }
  
  public static final long sumOfLong(Iterable<Long> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    long l = 0L;
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      l += ((Number)paramIterable.next()).longValue();
    }
    return l;
  }
  
  private static final <T> long sumOfLong(Iterable<? extends T> paramIterable, Function1<? super T, Long> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    long l = 0L;
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      l += ((Number)paramFunction1.invoke(paramIterable.next())).longValue();
    }
    return l;
  }
  
  public static final int sumOfShort(Iterable<Short> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    int i = 0;
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      i += ((Number)paramIterable.next()).shortValue();
    }
    return i;
  }
  
  private static final <T> int sumOfUInt(Iterable<? extends T> paramIterable, Function1<? super T, UInt> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    int i = UInt.constructor-impl(0);
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      i = UInt.constructor-impl(((UInt)paramFunction1.invoke(paramIterable.next())).unbox-impl() + i);
    }
    return i;
  }
  
  private static final <T> long sumOfULong(Iterable<? extends T> paramIterable, Function1<? super T, ULong> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "selector");
    long l = ULong.constructor-impl(0L);
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      l = ULong.constructor-impl(((ULong)paramFunction1.invoke(paramIterable.next())).unbox-impl() + l);
    }
    return l;
  }
  
  public static final <T> List<T> take(Iterable<? extends T> paramIterable, int paramInt)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    int i;
    if (paramInt >= 0) {
      i = 1;
    } else {
      i = 0;
    }
    if (i != 0)
    {
      if (paramInt == 0) {
        return CollectionsKt.emptyList();
      }
      if ((paramIterable instanceof Collection))
      {
        if (paramInt >= ((Collection)paramIterable).size()) {
          return CollectionsKt.toList(paramIterable);
        }
        if (paramInt == 1) {
          return CollectionsKt.listOf(CollectionsKt.first(paramIterable));
        }
      }
      i = 0;
      ArrayList localArrayList = new ArrayList(paramInt);
      paramIterable = paramIterable.iterator();
      int j;
      do
      {
        if (!paramIterable.hasNext()) {
          break;
        }
        localArrayList.add(paramIterable.next());
        j = i + 1;
        i = j;
      } while (j != paramInt);
      return CollectionsKt.optimizeReadOnlyList((List)localArrayList);
    }
    throw new IllegalArgumentException(("Requested element count " + paramInt + " is less than zero.").toString());
  }
  
  public static final <T> List<T> takeLast(List<? extends T> paramList, int paramInt)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    int i;
    if (paramInt >= 0) {
      i = 1;
    } else {
      i = 0;
    }
    if (i != 0)
    {
      if (paramInt == 0) {
        return CollectionsKt.emptyList();
      }
      i = paramList.size();
      if (paramInt >= i) {
        return CollectionsKt.toList((Iterable)paramList);
      }
      if (paramInt == 1) {
        return CollectionsKt.listOf(CollectionsKt.last(paramList));
      }
      ArrayList localArrayList = new ArrayList(paramInt);
      if ((paramList instanceof RandomAccess)) {
        for (paramInt = i - paramInt; paramInt < i; paramInt++) {
          localArrayList.add(paramList.get(paramInt));
        }
      }
      paramList = (Iterator)paramList.listIterator(i - paramInt);
      while (paramList.hasNext()) {
        localArrayList.add(paramList.next());
      }
      return (List)localArrayList;
    }
    throw new IllegalArgumentException(("Requested element count " + paramInt + " is less than zero.").toString());
  }
  
  public static final <T> List<T> takeLastWhile(List<? extends T> paramList, Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramList, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "predicate");
    if (paramList.isEmpty()) {
      return CollectionsKt.emptyList();
    }
    ListIterator localListIterator = paramList.listIterator(paramList.size());
    while (localListIterator.hasPrevious()) {
      if (!((Boolean)paramFunction1.invoke(localListIterator.previous())).booleanValue())
      {
        localListIterator.next();
        int i = paramList.size() - localListIterator.nextIndex();
        if (i == 0) {
          return CollectionsKt.emptyList();
        }
        paramList = new ArrayList(i);
        while (localListIterator.hasNext()) {
          paramList.add(localListIterator.next());
        }
        return (List)paramList;
      }
    }
    return CollectionsKt.toList((Iterable)paramList);
  }
  
  public static final <T> List<T> takeWhile(Iterable<? extends T> paramIterable, Function1<? super T, Boolean> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "predicate");
    ArrayList localArrayList = new ArrayList();
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (!((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        break;
      }
      localArrayList.add(localObject);
    }
    return (List)localArrayList;
  }
  
  public static final boolean[] toBooleanArray(Collection<Boolean> paramCollection)
  {
    Intrinsics.checkNotNullParameter(paramCollection, "<this>");
    boolean[] arrayOfBoolean = new boolean[paramCollection.size()];
    int i = 0;
    paramCollection = paramCollection.iterator();
    while (paramCollection.hasNext())
    {
      arrayOfBoolean[i] = ((Boolean)paramCollection.next()).booleanValue();
      i++;
    }
    return arrayOfBoolean;
  }
  
  public static final byte[] toByteArray(Collection<Byte> paramCollection)
  {
    Intrinsics.checkNotNullParameter(paramCollection, "<this>");
    byte[] arrayOfByte = new byte[paramCollection.size()];
    int i = 0;
    paramCollection = paramCollection.iterator();
    while (paramCollection.hasNext())
    {
      arrayOfByte[i] = ((Number)paramCollection.next()).byteValue();
      i++;
    }
    return arrayOfByte;
  }
  
  public static final char[] toCharArray(Collection<Character> paramCollection)
  {
    Intrinsics.checkNotNullParameter(paramCollection, "<this>");
    char[] arrayOfChar = new char[paramCollection.size()];
    int i = 0;
    paramCollection = paramCollection.iterator();
    while (paramCollection.hasNext())
    {
      arrayOfChar[i] = ((Character)paramCollection.next()).charValue();
      i++;
    }
    return arrayOfChar;
  }
  
  public static final <T, C extends Collection<? super T>> C toCollection(Iterable<? extends T> paramIterable, C paramC)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramC, "destination");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      paramC.add(paramIterable.next());
    }
    return paramC;
  }
  
  public static final double[] toDoubleArray(Collection<Double> paramCollection)
  {
    Intrinsics.checkNotNullParameter(paramCollection, "<this>");
    double[] arrayOfDouble = new double[paramCollection.size()];
    int i = 0;
    paramCollection = paramCollection.iterator();
    while (paramCollection.hasNext())
    {
      arrayOfDouble[i] = ((Number)paramCollection.next()).doubleValue();
      i++;
    }
    return arrayOfDouble;
  }
  
  public static final float[] toFloatArray(Collection<Float> paramCollection)
  {
    Intrinsics.checkNotNullParameter(paramCollection, "<this>");
    float[] arrayOfFloat = new float[paramCollection.size()];
    int i = 0;
    paramCollection = paramCollection.iterator();
    while (paramCollection.hasNext())
    {
      arrayOfFloat[i] = ((Number)paramCollection.next()).floatValue();
      i++;
    }
    return arrayOfFloat;
  }
  
  public static final <T> HashSet<T> toHashSet(Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    return (HashSet)CollectionsKt.toCollection(paramIterable, (Collection)new HashSet(MapsKt.mapCapacity(CollectionsKt.collectionSizeOrDefault(paramIterable, 12))));
  }
  
  public static final int[] toIntArray(Collection<Integer> paramCollection)
  {
    Intrinsics.checkNotNullParameter(paramCollection, "<this>");
    int[] arrayOfInt = new int[paramCollection.size()];
    int i = 0;
    paramCollection = paramCollection.iterator();
    while (paramCollection.hasNext())
    {
      arrayOfInt[i] = ((Number)paramCollection.next()).intValue();
      i++;
    }
    return arrayOfInt;
  }
  
  public static final <T> List<T> toList(Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    if ((paramIterable instanceof Collection))
    {
      switch (((Collection)paramIterable).size())
      {
      default: 
        paramIterable = CollectionsKt.toMutableList((Collection)paramIterable);
        break;
      case 1: 
        if ((paramIterable instanceof List)) {
          paramIterable = ((List)paramIterable).get(0);
        } else {
          paramIterable = paramIterable.iterator().next();
        }
        paramIterable = CollectionsKt.listOf(paramIterable);
        break;
      case 0: 
        paramIterable = CollectionsKt.emptyList();
      }
      return paramIterable;
    }
    return CollectionsKt.optimizeReadOnlyList(CollectionsKt.toMutableList(paramIterable));
  }
  
  public static final long[] toLongArray(Collection<Long> paramCollection)
  {
    Intrinsics.checkNotNullParameter(paramCollection, "<this>");
    long[] arrayOfLong = new long[paramCollection.size()];
    int i = 0;
    paramCollection = paramCollection.iterator();
    while (paramCollection.hasNext())
    {
      arrayOfLong[i] = ((Number)paramCollection.next()).longValue();
      i++;
    }
    return arrayOfLong;
  }
  
  public static final <T> List<T> toMutableList(Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    if ((paramIterable instanceof Collection)) {
      return CollectionsKt.toMutableList((Collection)paramIterable);
    }
    return (List)CollectionsKt.toCollection(paramIterable, (Collection)new ArrayList());
  }
  
  public static final <T> List<T> toMutableList(Collection<? extends T> paramCollection)
  {
    Intrinsics.checkNotNullParameter(paramCollection, "<this>");
    return (List)new ArrayList(paramCollection);
  }
  
  public static final <T> Set<T> toMutableSet(Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    if ((paramIterable instanceof Collection)) {
      paramIterable = (Set)new LinkedHashSet((Collection)paramIterable);
    } else {
      paramIterable = (Set)CollectionsKt.toCollection(paramIterable, (Collection)new LinkedHashSet());
    }
    return paramIterable;
  }
  
  public static final <T> Set<T> toSet(Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    if ((paramIterable instanceof Collection))
    {
      switch (((Collection)paramIterable).size())
      {
      default: 
        paramIterable = (Set)CollectionsKt.toCollection(paramIterable, (Collection)new LinkedHashSet(MapsKt.mapCapacity(((Collection)paramIterable).size())));
        break;
      case 1: 
        if ((paramIterable instanceof List)) {
          paramIterable = ((List)paramIterable).get(0);
        } else {
          paramIterable = paramIterable.iterator().next();
        }
        paramIterable = SetsKt.setOf(paramIterable);
        break;
      case 0: 
        paramIterable = SetsKt.emptySet();
      }
      return paramIterable;
    }
    return SetsKt.optimizeReadOnlySet((Set)CollectionsKt.toCollection(paramIterable, (Collection)new LinkedHashSet()));
  }
  
  public static final short[] toShortArray(Collection<Short> paramCollection)
  {
    Intrinsics.checkNotNullParameter(paramCollection, "<this>");
    short[] arrayOfShort = new short[paramCollection.size()];
    int i = 0;
    paramCollection = paramCollection.iterator();
    while (paramCollection.hasNext())
    {
      arrayOfShort[i] = ((Number)paramCollection.next()).shortValue();
      i++;
    }
    return arrayOfShort;
  }
  
  public static final <T> Set<T> union(Iterable<? extends T> paramIterable1, Iterable<? extends T> paramIterable2)
  {
    Intrinsics.checkNotNullParameter(paramIterable1, "<this>");
    Intrinsics.checkNotNullParameter(paramIterable2, "other");
    paramIterable1 = CollectionsKt.toMutableSet(paramIterable1);
    CollectionsKt.addAll((Collection)paramIterable1, paramIterable2);
    return paramIterable1;
  }
  
  public static final <T> List<List<T>> windowed(Iterable<? extends T> paramIterable, int paramInt1, int paramInt2, boolean paramBoolean)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    SlidingWindowKt.checkWindowSizeStep(paramInt1, paramInt2);
    if (((paramIterable instanceof RandomAccess)) && ((paramIterable instanceof List)))
    {
      int k = ((List)paramIterable).size();
      int j = k / paramInt2;
      if (k % paramInt2 == 0) {
        i = 0;
      } else {
        i = 1;
      }
      localArrayList1 = new ArrayList(j + i);
      int i = 0;
      for (;;)
      {
        if ((i >= 0) && (i < k)) {
          j = 1;
        } else {
          j = 0;
        }
        if (j == 0) {
          break;
        }
        int m = RangesKt.coerceAtMost(paramInt1, k - i);
        if ((m < paramInt1) && (!paramBoolean)) {
          break;
        }
        ArrayList localArrayList2 = new ArrayList(m);
        for (j = 0; j < m; j++) {
          localArrayList2.add(((List)paramIterable).get(j + i));
        }
        localArrayList1.add((List)localArrayList2);
        i += paramInt2;
      }
      return (List)localArrayList1;
    }
    ArrayList localArrayList1 = new ArrayList();
    paramIterable = SlidingWindowKt.windowedIterator(paramIterable.iterator(), paramInt1, paramInt2, paramBoolean, false);
    while (paramIterable.hasNext()) {
      localArrayList1.add((List)paramIterable.next());
    }
    return (List)localArrayList1;
  }
  
  public static final <T, R> List<R> windowed(Iterable<? extends T> paramIterable, int paramInt1, int paramInt2, boolean paramBoolean, Function1<? super List<? extends T>, ? extends R> paramFunction1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction1, "transform");
    SlidingWindowKt.checkWindowSizeStep(paramInt1, paramInt2);
    if (((paramIterable instanceof RandomAccess)) && ((paramIterable instanceof List)))
    {
      int k = ((List)paramIterable).size();
      int j = k / paramInt2;
      if (k % paramInt2 == 0) {
        i = 0;
      } else {
        i = 1;
      }
      localArrayList = new ArrayList(j + i);
      paramIterable = new MovingSubList((List)paramIterable);
      int i = 0;
      for (;;)
      {
        if ((i >= 0) && (i < k)) {
          j = 1;
        } else {
          j = 0;
        }
        if (j == 0) {
          break;
        }
        j = RangesKt.coerceAtMost(paramInt1, k - i);
        if ((!paramBoolean) && (j < paramInt1)) {
          break;
        }
        paramIterable.move(i, i + j);
        localArrayList.add(paramFunction1.invoke(paramIterable));
        i += paramInt2;
      }
      return (List)localArrayList;
    }
    ArrayList localArrayList = new ArrayList();
    paramIterable = SlidingWindowKt.windowedIterator(paramIterable.iterator(), paramInt1, paramInt2, paramBoolean, true);
    while (paramIterable.hasNext()) {
      localArrayList.add(paramFunction1.invoke((List)paramIterable.next()));
    }
    return (List)localArrayList;
  }
  
  public static final <T> Iterable<IndexedValue<T>> withIndex(Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    (Iterable)new IndexingIterable((Function0)new Lambda(paramIterable)
    {
      final Iterable<T> $this_withIndex;
      
      public final Iterator<T> invoke()
      {
        return this.$this_withIndex.iterator();
      }
    });
  }
  
  public static final <T, R> List<Pair<T, R>> zip(Iterable<? extends T> paramIterable, Iterable<? extends R> paramIterable1)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramIterable1, "other");
    Iterator localIterator1 = paramIterable.iterator();
    Iterator localIterator2 = paramIterable1.iterator();
    paramIterable = new ArrayList(Math.min(CollectionsKt.collectionSizeOrDefault(paramIterable, 10), CollectionsKt.collectionSizeOrDefault(paramIterable1, 10)));
    while ((localIterator1.hasNext()) && (localIterator2.hasNext())) {
      paramIterable.add(TuplesKt.to(localIterator1.next(), localIterator2.next()));
    }
    return (List)paramIterable;
  }
  
  public static final <T, R, V> List<V> zip(Iterable<? extends T> paramIterable, Iterable<? extends R> paramIterable1, Function2<? super T, ? super R, ? extends V> paramFunction2)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramIterable1, "other");
    Intrinsics.checkNotNullParameter(paramFunction2, "transform");
    Iterator localIterator1 = paramIterable.iterator();
    Iterator localIterator2 = paramIterable1.iterator();
    paramIterable = new ArrayList(Math.min(CollectionsKt.collectionSizeOrDefault(paramIterable, 10), CollectionsKt.collectionSizeOrDefault(paramIterable1, 10)));
    while ((localIterator1.hasNext()) && (localIterator2.hasNext())) {
      paramIterable.add(paramFunction2.invoke(localIterator1.next(), localIterator2.next()));
    }
    return (List)paramIterable;
  }
  
  public static final <T, R> List<Pair<T, R>> zip(Iterable<? extends T> paramIterable, R[] paramArrayOfR)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramArrayOfR, "other");
    int j = paramArrayOfR.length;
    ArrayList localArrayList = new ArrayList(Math.min(CollectionsKt.collectionSizeOrDefault(paramIterable, 10), j));
    int i = 0;
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext())
    {
      paramIterable = localIterator.next();
      if (i >= j) {
        break;
      }
      localArrayList.add(TuplesKt.to(paramIterable, paramArrayOfR[i]));
      i++;
    }
    return (List)localArrayList;
  }
  
  public static final <T, R, V> List<V> zip(Iterable<? extends T> paramIterable, R[] paramArrayOfR, Function2<? super T, ? super R, ? extends V> paramFunction2)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramArrayOfR, "other");
    Intrinsics.checkNotNullParameter(paramFunction2, "transform");
    int j = paramArrayOfR.length;
    ArrayList localArrayList = new ArrayList(Math.min(CollectionsKt.collectionSizeOrDefault(paramIterable, 10), j));
    int i = 0;
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext())
    {
      paramIterable = localIterator.next();
      if (i >= j) {
        break;
      }
      localArrayList.add(paramFunction2.invoke(paramIterable, paramArrayOfR[i]));
      i++;
    }
    return (List)localArrayList;
  }
  
  public static final <T> List<Pair<T, T>> zipWithNext(Iterable<? extends T> paramIterable)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext())
    {
      paramIterable = CollectionsKt.emptyList();
    }
    else
    {
      List localList = (List)new ArrayList();
      Object localObject;
      for (paramIterable = localIterator.next(); localIterator.hasNext(); paramIterable = (Iterable<? extends T>)localObject)
      {
        localObject = localIterator.next();
        localList.add(TuplesKt.to(paramIterable, localObject));
      }
      paramIterable = localList;
    }
    return paramIterable;
  }
  
  public static final <T, R> List<R> zipWithNext(Iterable<? extends T> paramIterable, Function2<? super T, ? super T, ? extends R> paramFunction2)
  {
    Intrinsics.checkNotNullParameter(paramIterable, "<this>");
    Intrinsics.checkNotNullParameter(paramFunction2, "transform");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return CollectionsKt.emptyList();
    }
    List localList = (List)new ArrayList();
    Object localObject;
    for (paramIterable = localIterator.next(); localIterator.hasNext(); paramIterable = (Iterable<? extends T>)localObject)
    {
      localObject = localIterator.next();
      localList.add(paramFunction2.invoke(paramIterable, localObject));
    }
    return localList;
  }
}


/* Location:              /home/icat/Documents/digital-awareness/src/undangan-pernikahan-dex2jar.jar!/kotlin/collections/CollectionsKt___CollectionsKt.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       0.7.1
 */